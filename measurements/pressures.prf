(pressures
 (pressure_TCC1 0
  (pressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (pressure? const-decl "bool" pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (unit_pressure_TCC1 0
  (unit_pressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (pressure? const-decl "bool" pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (negunit_pressure_TCC1 0
  (negunit_pressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (unit_pressure const-decl "pressure" pressures nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (pressure? const-decl "bool" pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (nonzero_pressure_TCC1 0
  (nonzero_pressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (unit_pressure const-decl "pressure" pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (nonneg_pressure_TCC1 0
  (nonneg_pressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (nonpos_pressure_TCC1 0
  (nonpos_pressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (pospressure_TCC1 0
  (pospressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (unit_pressure const-decl "pressure" pressures nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (negpressure_TCC1 0
  (negpressure_TCC1-1 nil 3642763298 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (unit_pressure const-decl "pressure" pressures nil)
    (negunit_pressure const-decl "pressure" pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pa_TCC1 0
  (pa_TCC1-1 nil 3646735436 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (g const-decl "posmass" masses nil)
    (kg const-decl "posmass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (pa_TCC2 0
  (pa_TCC2-1 nil 3646735581 ("" (subtype-tcc) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (m const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (kg const-decl "posmass" masses nil)
    (g const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (pa_TCC3 0
  (pa_TCC3-1 nil 3646735581 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (pa_TCC4 0
  (pa_TCC4-1 nil 3646735581 ("" (subtype-tcc) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_value? const-decl "bool" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (pa_TCC5 0
  (pa_TCC5-1 nil 3646735581 ("" (grind) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (m const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (kg const-decl "posmass" masses nil)
    (g const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (pa_TCC6 0
  (pa_TCC6-1 nil 3646735581 ("" (grind) nil nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pressure? const-decl "bool" pressures nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (preferred_system? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (m const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (kg const-decl "posmass" masses nil)
    (g const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (pa_def_TCC1 0
  (pa_def_TCC1-1 nil 3646735483 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (g const-decl "posmass" masses nil)
    (kg const-decl "posmass" masses nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (m const-decl "poslength" lengths nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (pa const-decl "pospressure" pressures nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (pa_def_TCC2 0
  (pa_def_TCC2-1 nil 3646735483 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (unit_pressure const-decl "pressure" pressures nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (pa_def 0
  (pa_def-1 nil 3646735510 ("" (grind) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (g const-decl "posmass" masses nil)
    (kg const-decl "posmass" masses nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (m const-decl "poslength" lengths nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (pa const-decl "pospressure" pressures nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (zero_pressure const-decl "pressure" pressures nil)
    (unit_pressure const-decl "pressure" pressures nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (base_value const-decl "real" measurements nil)
    (= const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   shostak))
 (pressure_plus_pressure_is_pressure_TCC1 0
  (pressure_plus_pressure_is_pressure_TCC1-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (pressure? const-decl "bool" pressures nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (pressure_plus_pressure_is_pressure_TCC2 0
  (pressure_plus_pressure_is_pressure_TCC2-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (pressure? const-decl "bool" pressures nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (pressure_plus_pressure_is_pressure 0
  (pressure_plus_pressure_is_pressure-1 nil 3642763298
   ("" (grind) nil nil)
   ((unit_match? const-decl "bool" measurements nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (pressure? const-decl "bool" pressures nil))
   nil))
 (pressure_minus_pressure_is_pressure 0
  (pressure_minus_pressure_is_pressure-1 nil 3642763298
   ("" (grind) nil nil)
   ((unit_match? const-decl "bool" measurements nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (pressure? const-decl "bool" pressures nil))
   nil))
 (real_times_pressure_is_pressure 0
  (real_times_pressure_is_pressure-1 nil 3642763298
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (pressure? const-decl "bool" pressures nil))
   nil))
 (pressure_div_nzreal_is_pressure 0
  (pressure_div_nzreal_is_pressure-1 nil 3642763298
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (pressure? const-decl "bool" pressures nil))
   nil))
 (neg_pressure_is_pressure 0
  (neg_pressure_is_pressure-1 nil 3642763298
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (pressure? const-decl "bool" pressures nil))
   nil))
 (force_over_area_is_pressure_TCC1 0
  (force_over_area_is_pressure_TCC1-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force? const-decl "bool" forces nil)
    (force nonempty-type-eq-decl nil forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (force_over_area_is_pressure_TCC2 0
  (force_over_area_is_pressure_TCC2-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force? const-decl "bool" forces nil)
    (force nonempty-type-eq-decl nil forces nil)
    (area? const-decl "bool" areas nil)
    (area nonempty-type-eq-decl nil areas nil)
    (number nonempty-type-decl nil numbers nil)
    (nzarea nonempty-type-eq-decl nil areas nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (force_over_area_is_pressure 0
  (force_over_area_is_pressure-1 nil 3642763298
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force? const-decl "bool" forces nil)
    (force nonempty-type-eq-decl nil forces nil)
    (area? const-decl "bool" areas nil)
    (area nonempty-type-eq-decl nil areas nil)
    (number nonempty-type-decl nil numbers nil)
    (nzarea nonempty-type-eq-decl nil areas nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (pressure? const-decl "bool" pressures nil))
   nil))
 (nzreal_times_nzpressure_is_nzpressure_TCC1 0
  (nzreal_times_nzpressure_is_nzpressure_TCC1-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (pressure? const-decl "bool" pressures nil)
    (pressure nonempty-type-eq-decl nil pressures nil)
    (number nonempty-type-decl nil numbers nil)
    (nzpressure nonempty-type-eq-decl nil pressures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (nzreal_times_nzpressure_is_nzpressure 0
  (nzreal_times_nzpressure_is_nzpressure-1 nil 3642763298
   ("" (judgement-tcc) nil nil)
   ((* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil))
   nil))
 (nzpressure_div_nzreal_is_nzpressure 0
  (nzpressure_div_nzreal_is_nzpressure-1 nil 3642763298
   ("" (judgement-tcc) nil nil)
   ((/ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil))
   nil)))

