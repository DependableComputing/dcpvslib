(forces
 (force_TCC1 0
  (force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (unit_force_TCC1 0
  (unit_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (negunit_force_TCC1 0
  (negunit_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (nonzero_force_TCC1 0
  (nonzero_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (nonneg_force_TCC1 0
  (nonneg_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (nonpos_force_TCC1 0
  (nonpos_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (posforce_TCC1 0
  (posforce_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (unit_force const-decl "force" forces nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (negforce_TCC1 0
  (negforce_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (negunit_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (zero_force const-decl "force" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (force_plus_force_is_force_TCC1 0
  (force_plus_force_is_force_TCC1-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force? const-decl "bool" forces nil)
    (force nonempty-type-eq-decl nil forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (force_plus_force_is_force_TCC2 0
  (force_plus_force_is_force_TCC2-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force? const-decl "bool" forces nil)
    (force nonempty-type-eq-decl nil forces nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (force_plus_force_is_force 0
  (force_plus_force_is_force-1 nil 3642689215 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (force? const-decl "bool" forces nil))
   nil))
 (force_minus_force_is_force 0
  (force_minus_force_is_force-1 nil 3642689215 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (force? const-decl "bool" forces nil))
   nil))
 (real_times_force_is_force 0
  (real_times_force_is_force-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (force? const-decl "bool" forces nil))
   nil))
 (force_div_nzreal_is_force 0
  (force_div_nzreal_is_force-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (force? const-decl "bool" forces nil))
   nil))
 (neg_force_is_force 0
  (neg_force_is_force-1 nil 3642689215 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (force? const-decl "bool" forces nil))
   nil))
 (acceleration_times_mass_is_force_TCC1 0
  (acceleration_times_mass_is_force_TCC1-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (acceleration_times_mass_is_force_TCC2 0
  (acceleration_times_mass_is_force_TCC2-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (mass? const-decl "bool" masses nil)
    (mass nonempty-type-eq-decl nil masses nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (acceleration_times_mass_is_force 0
  (acceleration_times_mass_is_force-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (mass? const-decl "bool" masses nil)
    (mass nonempty-type-eq-decl nil masses nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (force? const-decl "bool" forces nil))
   nil))
 (nzreal_times_nzforce_is_nzforce_TCC1 0
  (nzreal_times_nzforce_is_nzforce_TCC1-1 nil 3646733191
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force? const-decl "bool" forces nil)
    (force nonempty-type-eq-decl nil forces nil)
    (number nonempty-type-decl nil numbers nil)
    (nzforce nonempty-type-eq-decl nil forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (nzreal_times_nzforce_is_nzforce 0
  (nzreal_times_nzforce_is_nzforce-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil))
   nil))
 (nzforce_div_nzreal_is_nzforce 0
  (nzforce_div_nzreal_is_nzforce-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((/ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil))
   nil))
 (N_TCC1 0
  (N_TCC1-1 nil 3642755612 ("" (grind) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (g const-decl "posmass" masses nil)
    (kg const-decl "posmass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (N_TCC2 0
  (N_TCC2-1 nil 3642755612
   ("" (grind) (("" (typepred "s") (("" (field) nil nil)) nil)) nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (m const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (kg const-decl "posmass" masses nil)
    (g const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (N_TCC3 0
  (N_TCC3-1 nil 3642755612
   ("" (typepred "g" "m" "s")
    (("" (grind)
      (("" (case "(g`value * m`value) / (s`value * s`value) > 0")
        (("1" (field) nil nil) ("2" (field) nil nil)) nil))
      nil))
    nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (mass? const-decl "bool" masses nil)
    (mass nonempty-type-eq-decl nil masses nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (posmass nonempty-type-eq-decl nil masses nil)
    (g const-decl "posmass" masses nil)
    (length? const-decl "bool" lengths nil)
    (length nonempty-type-eq-decl nil lengths nil)
    (poslength nonempty-type-eq-decl nil lengths nil)
    (m const-decl "poslength" lengths nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (postime nonempty-type-eq-decl nil times nil)
    (s const-decl "postime" times nil))
   nil))
 (N_TCC4 0
  (N_TCC4-1 nil 3645153821 ("" (grind) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (zero_value? const-decl "bool" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (N_TCC5 0
  (N_TCC5-1 nil 3646733191
   ("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (m const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (kg const-decl "posmass" masses nil)
    (g const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (N_TCC6 0
  (N_TCC6-1 nil 3646733191 ("" (grind) nil nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (force? const-decl "bool" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (m const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (kg const-decl "posmass" masses nil)
    (g const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (N_def_TCC1 0
  (N_def_TCC1-1 nil 3646735868 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (g const-decl "posmass" masses nil)
    (kg const-decl "posmass" masses nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (m const-decl "poslength" lengths nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (N const-decl "posforce" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (N_def_TCC2 0
  (N_def_TCC2-1 nil 3646735868 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (N_def 0
  (N_def-1 nil 3646735897 ("" (grind) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (g const-decl "posmass" masses nil)
    (kg const-decl "posmass" masses nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (m const-decl "poslength" lengths nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (N const-decl "posforce" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (base_value const-decl "real" measurements nil)
    (= const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   shostak))
 (lb_TCC1 0
  (lb_TCC1-1 nil 3642755864
   ("" (grind)
    (("" (field)
      (("" (typepred "g" "m")
        (("" (case "(g`value * m`value) > 0")
          (("1" (field) nil nil) ("2" (field) nil nil)) nil))
        nil))
      nil))
    nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (slug const-decl "posmass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (lb_TCC2 0
  (lb_TCC2-1 nil 3645153821 ("" (subtype-tcc) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (ft const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (slug const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (lb_TCC3 0
  (lb_TCC3-1 nil 3645153821 ("" (grind) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (ft const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (slug const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (lb_TCC4 0
  (lb_TCC4-1 nil 3645153821 ("" (grind) nil nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (force? const-decl "bool" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (ft const-decl "poslength" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (zero_length const-decl "length" lengths nil)
    (slug const-decl "posmass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (lb_def_TCC1 0
  (lb_def_TCC1-1 nil 3646735868 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (slug const-decl "posmass" masses nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (ft const-decl "poslength" lengths nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (lb const-decl "posforce" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (lb_def_TCC2 0
  (lb_def_TCC2-1 nil 3646735868 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (lb_def 0
  (lb_def-1 nil 3646735903 ("" (grind) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (unit_mass const-decl "mass" masses nil)
    (slug const-decl "posmass" masses nil)
    (zero_length const-decl "length" lengths nil)
    (unit_length const-decl "length" lengths nil)
    (ft const-decl "poslength" lengths nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (lb const-decl "posforce" forces nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (base_value const-decl "real" measurements nil)
    (= const-decl "bool" measurements nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   shostak)))

