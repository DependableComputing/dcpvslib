(measurements
 (valid_measurement_TCC1 0
  (valid_measurement_TCC1-1 nil 3646653368 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil
   (valid_measurement subtype "measurements.zero_measurement"
    "valid_measurement")))
 (system_match_not_transitive 0
  (system_match_not_transitive-1 nil 3646665114
   (""
    (inst 1 "zero_measurement WITH [`value := 1, `system := METRIC]"
     "zero_measurement"
     "zero_measurement WITH [`value := 1, `system := IMPERIAL]")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil))
    nil)
   ((system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (IMPERIAL? adt-recognizer-decl "[system_enum -> boolean]"
     measurements nil)
    (IMPERIAL adt-constructor-decl "(IMPERIAL?)" measurements nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (METRIC? adt-recognizer-decl "[system_enum -> boolean]"
     measurements nil)
    (METRIC adt-constructor-decl "(METRIC?)" measurements nil))
   shostak))
 (explicit_system_match_transitive 0
  (explicit_system_match_transitive-1 nil 3666022800
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (explicit_system_match? const-decl "bool" measurements nil))
   shostak))
 (unit_measurement_TCC1 0
  (unit_measurement_TCC1-1 nil 3646655874 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil
   (unit_measurement subtype
    "measurements.zero_measurement WITH [`value := 1, `system := measurements.NOT_APPLICABLE]"
    "valid_measurement")))
 (negunit_measurement_TCC1 0
  (negunit_measurement_TCC1-1 nil 3646655874 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (negunit_measurement subtype
    "measurements.zero_measurement WITH [`value := , `system := measurements.NOT_APPLICABLE]"
    "valid_measurement")))
 (nonzero_measurement_TCC1 0
  (nonzero_measurement_TCC1-1 nil 3639470965 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil))
   nil
   (nonzero_measurement subtype "measurements.unit_measurement"
    "nonzero_measurement")))
 (nonneg_measurement_TCC1 0
  (nonneg_measurement_TCC1-1 nil 3639470965 ("" (subtype-tcc) nil nil)
   ((valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil
   (nonneg_measurement subtype "measurements.zero_measurement"
    "nonneg_measurement")))
 (nonpos_measurement_TCC1 0
  (nonpos_measurement_TCC1-1 nil 3639470965 ("" (subtype-tcc) nil nil)
   ((valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil
   (nonpos_measurement subtype "measurements.zero_measurement"
    "nonpos_measurement")))
 (posmeasurement_TCC1 0
  (posmeasurement_TCC1-1 nil 3639470965 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (posmeasurement subtype "measurements.unit_measurement"
    "posmeasurement")))
 (negmeasurement_TCC1 0
  (negmeasurement_TCC1-1 nil 3639470965 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (negunit_measurement const-decl "valid_measurement" measurements
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (negmeasurement subtype "measurements.negunit_measurement"
    "negmeasurement")))
 (unit_match_not_transitive 0
  (unit_match_not_transitive-1 nil 3646652115
   (""
    (inst 1 "unit_measurement WITH [`system := METRIC]"
     "unit_measurement" "unit_measurement WITH [`system := IMPERIAL]")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((unit_match? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (IMPERIAL? adt-recognizer-decl "[system_enum -> boolean]"
     measurements nil)
    (IMPERIAL adt-constructor-decl "(IMPERIAL?)" measurements nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (METRIC? adt-recognizer-decl "[system_enum -> boolean]"
     measurements nil)
    (METRIC adt-constructor-decl "(METRIC?)" measurements nil))
   shostak))
 (explicit_unit_match_transitive 0
  (explicit_unit_match_transitive-1 nil 3665913891 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (explicit_system_match? const-decl "bool" measurements nil)
    (explicit_unit_match? const-decl "bool" measurements nil))
   shostak))
 (unit_model_TCC1 0
  (unit_model_TCC1-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (unit_model subtype
    "measurements.m WITH [`value := measurements.value]"
    "{x: measurements.valid_measurement | measurements.unit_match?(x, measurements.m)}")))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (plus subtype
    "measurements.x WITH [`value := (number_fields.+)(measurements.x`value, measurements.y`value)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (plus_TCC2 0
  (plus_TCC2-1 nil 3646650359 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (plus subtype
    "measurements.y WITH [`value := (number_fields.+)(measurements.x`value, measurements.y`value)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (commutative_add_TCC1 0
  (commutative_add_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (commutative_add subtype "measurements.x"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.y, m)}")))
 (commutative_add 0
  (commutative_add-1 nil 3645147442 ("" (model-check) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (associative_add_TCC1 0
  (associative_add_TCC1-1 nil 3645146467 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (associative_add subtype
    "((measurements.+)(measurements.y, measurements.z))"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (associative_add_TCC2 0
  (associative_add_TCC2-1 nil 3645147249 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (associative_add subtype "measurements.z"
    "{m: measurements.valid_measurement | measurements.unit_match?(((measurements.+)(measurements.x, measurements.y)), m)}")))
 (associative_add 0
  (associative_add-1 nil 3645146554
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (difference_TCC1 0
  (difference_TCC1-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (difference subtype
    "measurements.x WITH [`value := (number_fields.-)(measurements.x`value, measurements.y`value)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (difference_TCC2 0
  (difference_TCC2-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (difference subtype
    "measurements.y WITH [`value := (number_fields.-)(measurements.x`value, measurements.y`value)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (difference_TCC3 0
  (difference_TCC3-1 nil 3646650359 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (difference subtype "measurements.x WITH [`value := ]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (inverse_add 0
  (inverse_add-1 nil 3645146699 ("" (grind) nil nil)
   ((- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (minus_add_TCC1 0
  (minus_add_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (minus_add subtype ""
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (minus_add 0
  (minus_add-1 nil 3645147454 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil))
   shostak))
 (times_TCC1 0
  (times_TCC1-1 nil 3645225232 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (times subtype
    "(# value := number_fields.*(measurements.x`value, measurements.y`value), system := IF measurements.preferred_system?(measurements.x, measurements.y) THEN measurements.x`system ELSE measurements.y`system ENDIF, scaling := number_fields.*(measurements.x`scaling, measurements.y`scaling), length_dim := (number_fields.+)(measurements.x`length_dim, measurements.y`length_dim), time_dim := (number_fields.+)(measurements.x`time_dim, measurements.y`time_dim), mass_dim := (number_fields.+)(measurements.x`mass_dim, measurements.y`mass_dim), current_dim := (number_fields.+)(measurements.x`current_dim, measurements.y`current_dim), temp_dim := (number_fields.+)(measurements.x`temp_dim, measurements.y`temp_dim), intens_dim := (number_fields.+)(measurements.x`intens_dim, measurements.y`intens_dim), angle_dim := (number_fields.+)(measurements.x`angle_dim, measurements.y`angle_dim) #)"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (commutative_mult_TCC1 0
  (commutative_mult_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (commutative_mult subtype "measurements.x"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.y, m)}")))
 (commutative_mult 0
  (commutative_mult-1 nil 3645147462 ("" (model-check) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (associative_mult_TCC1 0
  (associative_mult_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (associative_mult subtype "measurements.z"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.y, m)}")))
 (associative_mult_TCC2 0
  (associative_mult_TCC2-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preferred_system? const-decl "bool" measurements nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (associative_mult subtype
    "(measurements.*(measurements.y, measurements.z))"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (associative_mult_TCC3 0
  (associative_mult_TCC3-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (associative_mult subtype "measurements.y"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (associative_mult_TCC4 0
  (associative_mult_TCC4-1 nil 3646652368 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preferred_system? const-decl "bool" measurements nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (associative_mult subtype "measurements.z"
    "{m: measurements.valid_measurement | measurements.system_match?((measurements.*(measurements.x, measurements.y)), m)}")))
 (associative_mult 0
  (associative_mult-1 nil 3645147468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (distributive_TCC1 0
  (distributive_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (distributive subtype
    "((measurements.+)(measurements.y, measurements.z))"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (distributive_TCC2 0
  (distributive_TCC2-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (distributive subtype "measurements.z"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (distributive_TCC3 0
  (distributive_TCC3-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (preferred_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (distributive subtype
    "measurements.*(measurements.x, measurements.z)"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.*(measurements.x, measurements.y), m)}")))
 (distributive 0
  (distributive-1 nil 3645148159 ("" (grind) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (system_match? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unit_match? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil))
   shostak))
 (times_TCC2 0
  (times_TCC2-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (times subtype
    "measurements.y WITH [`value := number_fields.*(measurements.x, measurements.y`value)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.y, m)}")))
 (times_TCC3 0
  (times_TCC3-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (times subtype
    "measurements.x WITH [`value := number_fields.*(measurements.x`value, measurements.y)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (mr_commutative_mult 0
  (mr_commutative_mult-1 nil 3645148590 ("" (grind) nil nil)
   ((* const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil))
   shostak))
 (mr_associative_mult 0
  (mr_associative_mult-1 nil 3645148598 ("" (grind) nil nil)
   ((* const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (mr_associative_mult2_TCC1 0
  (mr_associative_mult2_TCC1-1 nil 3645148549
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (mr_associative_mult2 subtype
    "(measurements.*(measurements.y, measurements.z))"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (mr_associative_mult2_TCC2 0
  (mr_associative_mult2_TCC2-1 nil 3645148549
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (mr_associative_mult2 subtype "measurements.z"
    "{m: measurements.valid_measurement | measurements.system_match?((measurements.*(measurements.x, measurements.y)), m)}")))
 (mr_associative_mult2 0
  (mr_associative_mult2-1 nil 3645148604 ("" (grind) nil nil)
   ((* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (mr_distributive_TCC1 0
  (mr_distributive_TCC1-1 nil 3645148549 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (mr_distributive subtype
    "measurements.*(measurements.x, measurements.z)"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.*(measurements.x, measurements.y), m)}")))
 (mr_distributive 0
  (mr_distributive-1 nil 3645148609 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (system_match? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil))
   shostak))
 (divide_TCC1 0
  (divide_TCC1-1 nil 3639429787 ("" (subtype-tcc) nil nil) nil nil
   (divide subtype "measurements.y`value" "nznum")))
 (divide_TCC2 0
  (divide_TCC2-1 nil 3645133710 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (nzmeasurement nonempty-type-eq-decl nil measurements nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (divide subtype
    "(# value := number_fields./(measurements.x`value, measurements.y`value), system := IF measurements.preferred_system?(measurements.x, measurements.y) THEN measurements.x`system ELSE measurements.y`system ENDIF, scaling := number_fields./(measurements.x`scaling, measurements.y`scaling), length_dim := (number_fields.-)(measurements.x`length_dim, measurements.y`length_dim), time_dim := (number_fields.-)(measurements.x`time_dim, measurements.y`time_dim), mass_dim := (number_fields.-)(measurements.x`mass_dim, measurements.y`mass_dim), current_dim := (number_fields.-)(measurements.x`current_dim, measurements.y`current_dim), temp_dim := (number_fields.-)(measurements.x`temp_dim, measurements.y`temp_dim), intens_dim := (number_fields.-)(measurements.x`intens_dim, measurements.y`intens_dim), angle_dim := (number_fields.-)(measurements.x`angle_dim, measurements.y`angle_dim) #)"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.y, m)}")))
 (inverse_mult_TCC1 0
  (inverse_mult_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil
   (inverse_mult subtype
    "(measurements.unit_measurement WITH [`system := measurements.n0x`system])"
    "valid_measurement")))
 (inverse_mult_TCC2 0
  (inverse_mult_TCC2-1 nil 3646655874 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (inverse_mult subtype "measurements.n0x"
    "{m: measurements.nzmeasurement | measurements.system_match?((measurements.unit_measurement WITH [`system := measurements.n0x`system]), m)}")))
 (inverse_mult 0
  (inverse_mult-1 nil 3645148270 ("" (grind) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (divide_TCC3 0
  (divide_TCC3-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (divide subtype
    "measurements.x WITH [`value := number_fields./(measurements.x`value, measurements.y)]"
    "{m: measurements.valid_measurement | measurements.unit_match?(measurements.x, m)}")))
 (divide_TCC4 0
  (divide_TCC4-1 nil 3645225232 ("" (subtype-tcc) nil nil) nil nil
   (divide subtype "measurements.y`value" "nznum")))
 (divide_TCC5 0
  (divide_TCC5-1 nil 3645225232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (nzmeasurement nonempty-type-eq-decl nil measurements nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (divide subtype
    "(# value := number_fields./(measurements.x, measurements.y`value), system := measurements.y`system, scaling := number_fields./(1, measurements.y`scaling), length_dim := , time_dim := , mass_dim := , current_dim := , temp_dim := , intens_dim := , angle_dim :=  #)"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.y, m)}")))
 (mr_inverse_mult 0
  (mr_inverse_mult-1 nil 3645148613 ("" (grind) nil nil)
   ((/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (equal_TCC1 0
  (equal_TCC1-1 nil 3716918930 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (dimensionless? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil (equal subtype "measurements.x" "valid_measurement")))
 (trich_lt_TCC1 0
  (trich_lt_TCC1-1 nil 3645218206 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (base_value const-decl "real" measurements nil)
    (= const-decl "bool" measurements nil)
    (< const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil))
   nil
   (trich_lt subtype "measurements.x"
    "{m: measurements.valid_measurement | measurements.comparable?(measurements.y, m)}")))
 (trich_lt 0
  (trich_lt-1 nil 3645218238 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (base_value const-decl "real" measurements nil)
    (< const-decl "bool" measurements nil)
    (= const-decl "bool" measurements nil))
   shostak))
 (trich_lt_dimensionless 0
  (trich_lt_dimensionless-1 nil 3716919273
   ("" (skeep 1 t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" measurements nil)
    (= const-decl "bool" measurements nil)
    (< const-decl "bool" measurements nil)
    (base_value const-decl "real" measurements nil)
    (dimensionless? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil))
   shostak))
 (greaterp_TCC1 0
  (greaterp_TCC1-1 nil 3645224438 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil))
   nil
   (greaterp subtype "measurements.x"
    "{m: measurements.valid_measurement | measurements.comparable?(measurements.y, m)}")))
 (trich_gt 0
  (trich_gt-1 nil 3645218736 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (base_value const-decl "real" measurements nil)
    (< const-decl "bool" measurements nil)
    (> const-decl "bool" measurements nil)
    (= const-decl "bool" measurements nil))
   shostak))
 (trich_gt_dimensionless 0
  (trich_gt_dimensionless-1 nil 3716919280
   ("" (skeep 1 t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" measurements nil)
    (< const-decl "bool" measurements nil)
    (= const-decl "bool" measurements nil)
    (> const-decl "bool" measurements nil)
    (< const-decl "bool" measurements nil)
    (base_value const-decl "real" measurements nil)
    (dimensionless? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil))
   shostak))
 (sqrt_TCC1 0
  (sqrt_TCC1-1 nil 3639470687 ("" (subtype-tcc) nil nil) nil nil
   (sqrt subtype "measurements.x`value" "nonneg_real")))
 (sqrt_TCC2 0
  (sqrt_TCC2-1 nil 3639688275 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnmeasurement nonempty-type-eq-decl nil measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (sqrt subtype
         "(# value := sqrt.sqrt(measurements.x`value), system := measurements.x`system, scaling := sqrt.sqrt(measurements.x`scaling), length_dim := number_fields./(measurements.x`length_dim, 2), time_dim := number_fields./(measurements.x`time_dim, 2), mass_dim := number_fields./(measurements.x`mass_dim, 2), current_dim := number_fields./(measurements.x`current_dim, 2), temp_dim := number_fields./(measurements.x`temp_dim, 2), intens_dim := number_fields./(measurements.x`intens_dim, 2), angle_dim := number_fields./(measurements.x`angle_dim, 2) #)"
         "{m: measurements.nnmeasurement | measurements.system_match?(measurements.x, m)}")))
 (expt_TCC1 0
  (expt_TCC1-1 nil 3639477842 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil
   (expt subtype
         "measurements.unit_measurement WITH [`system := measurements.x`system]"
         "{m: measurements.valid_measurement | measurements.x`system = m`system}")))
 (expt_TCC2 0
  (expt_TCC2-1 nil 3639477842 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (expt subtype "(number_fields.-)(measurements.n, 1)" "nat")))
 (expt_TCC3 0
  (expt_TCC3-1 nil 3645133710 ("" (subtype-tcc) nil nil) nil nil
   (expt termination
         "measurements.expt(measurements.x, (number_fields.-)(measurements.n, 1))"
         "nil")))
 (expt_TCC4 0
  (expt_TCC4-1 nil 3646662772 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (expt subtype
         "measurements.expt(measurements.x, (number_fields.-)(measurements.n, 1))"
         "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (expt_TCC5 0
  (expt_TCC5-1 nil 3646662772 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil))
   nil
   (expt subtype
         "measurements.*(measurements.x, measurements.expt(measurements.x, (number_fields.-)(measurements.n, 1)))"
         "{m: measurements.valid_measurement | measurements.x`system = m`system}")))
 (caret_TCC1 0
  (caret_TCC1-1 nil 3639477842 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (zero_value? const-decl "bool" measurements nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil))
   nil
   (caret subtype "measurements.expt(measurements.x, measurements.i)"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (caret_TCC2 0
  (caret_TCC2-1 nil 3639477842
   ("" (skeep)
    (("" (typepred "i")
      (("" (expand "expt")
        (("" (lift-if)
          (("" (model-check)
            ((""
              (lemma "nat_induction"
               ("p"
                "LAMBDA (j: nat): FORALL(a: {m: valid_measurement | m`value /= 0}): expt(a, j)`value /= 0"))
              (("" (split)
                (("1" (grind) (("1" (field) nil nil)) nil)
                 ("2" (grind) nil nil)
                 ("3" (skeep)
                  (("3" (skeep)
                    (("3" (inst -1 "a")
                      (("3" (expand "expt" -2)
                        (("3" (expand "*" -2) (("3" (field) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_value? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (caret subtype "" "nat")))
 (caret_TCC3 0
  (caret_TCC3-1 nil 3645225232
   ("" (skeep)
    (("" (typepred "x" "i" "expt(x, -i)")
      (("1" (split -2)
        (("1" (expand "zero_value?")
          (("1"
            (lemma "nat_induction"
             ("p"
              "LAMBDA (j: nat): FORALL(a: {m: valid_measurement | m`value /= 0}): expt(a, j)`value /= 0"))
            (("1" (split)
              (("1" (inst -1 "-i")
                (("1" (inst -1 "x")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert)
                (("2" (skeep)
                  (("2" (typepred "a")
                    (("2" (expand "expt" -3)
                      (("2" (expand "unit_measurement")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (skeep)
                  (("3" (inst -1 "a")
                    (("3" (expand "expt" -2)
                      (("3" (expand "*" -2)
                        (("3" (typepred "a") (("3" (field) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_value? const-decl "bool" measurements nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "{i: int | NOT (zero_value?(x)) OR i >= 0}"
       measurements nil)
    (x skolem-const-decl "valid_measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (/= const-decl "boolean" notequal nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil))
   nil
   (caret subtype "measurements.expt(measurements.x, )"
    "nzmeasurement")))
 (caret_TCC4 0
  (caret_TCC4-1 nil 3646662772
   ("" (skeep)
    (("" (typepred "x" "i")
      (("" (case "explicit_system?(x)")
        (("1" (grind) nil nil)
         ("2" (case "x`system = ANY")
          (("1" (grind) nil nil)
           ("2" (case "x`system = NOT_APPLICABLE")
            (("1" (hide 1 2)
              (("1" (case "(1 / expt(x, -i))`system = NOT_APPLICABLE")
                (("1" (expand "system_match?") (("1" (assert) nil nil))
                  nil)
                 ("2" (case "expt(x, -i)`system = NOT_APPLICABLE")
                  (("1" (name-replace "e" "expt(x, -i)")
                    (("1" (hide -2 -3 -4 2 3) (("1" (grind) nil nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "nat_induction"
                     ("p"
                      "LAMBDA (j: nat): FORALL(a: {m: valid_measurement | m`system = NOT_APPLICABLE}): expt(a, j)`system = NOT_APPLICABLE"))
                    (("2" (split)
                      (("1" (inst -1 "-i")
                        (("1" (inst -1 "x") nil nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (skeep)
                        (("3" (skeep)
                          (("3" (inst -1 "a")
                            (("3" (expand "expt" 1)
                              (("3"
                                (expand "*" 1)
                                (("3"
                                  (hide -3 -4 2 3 4 5)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil)
             ("2" (hide - 4 5) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_value? const-decl "bool" measurements nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ANY? adt-recognizer-decl "[system_enum -> boolean]" measurements
     nil)
    (ANY adt-constructor-decl "(ANY?)" measurements nil)
    (i skolem-const-decl "{i: int | NOT (zero_value?(x)) OR i >= 0}"
       measurements nil)
    (x skolem-const-decl "valid_measurement" measurements nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nzmeasurement nonempty-type-eq-decl nil measurements nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NOT_APPLICABLE adt-constructor-decl "(NOT_APPLICABLE?)"
     measurements nil)
    (NOT_APPLICABLE? adt-recognizer-decl "[system_enum -> boolean]"
     measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (explicit_system? const-decl "bool" measurements nil))
   nil
   (caret subtype
    "measurements./(1, measurements.expt(measurements.x, ))"
    "{m: measurements.valid_measurement | measurements.system_match?(measurements.x, m)}")))
 (expt_pos_TCC1 0
  (expt_pos_TCC1-1 nil 3639836382 ("" (subtype-tcc) nil nil)
   ((zero_value? const-decl "bool" measurements nil)) nil
   (expt_pos subtype "measurements.i"
    "{i: integers.int | booleans.OR(, reals.>=(i, 0))}")))
 (expt_pos 0
  (expt_pos-1 nil 3639487845
   ("" (skeep)
    ((""
      (lemma "nat_induction"
       ("p"
        "LAMBDA (j: nat): FORALL(a: posmeasurement): (a ^ j)`value > 0"))
      (("" (split)
        (("1" (case "i >= 0")
          (("1" (inst -2 "i") (("1" (inst -2 "px") nil nil)) nil)
           ("2" (inst -1 "-i")
            (("1" (inst -1 "px")
              (("1" (expand "^")
                (("1" (assert)
                  (("1" (expand "/") (("1" (field) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (typepred "a")
              (("2" (hide 2)
                (("2" (expand* "^" "expt" "unit_measurement")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (hide 2)
              (("3" (inst -1 "a")
                (("3" (typepred "a")
                  (("3" (expand "^")
                    (("3" (expand "expt" 1)
                      (("3" (expand "*" 1) (("3" (field) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (zero_value? const-decl "bool" measurements nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posmeasurement nonempty-type-eq-decl nil measurements nil)
    (> const-decl "bool" reals nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (i skolem-const-decl "int" measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (sqrt_inverse_sq_TCC1 0
  (sqrt_inverse_sq_TCC1-1 nil 3645134144 ("" (subtype-tcc) nil nil)
   ((sqrt const-decl "{m: nnmeasurement | system_match?(x, m)}"
          measurements nil)
    (zero_value? const-decl "bool" measurements nil))
   nil
   (sqrt_inverse_sq subtype "2"
    "{i: integers.int | booleans.OR(, reals.>=(i, 0))}")))
 (sqrt_inverse_sq 0
  (sqrt_inverse_sq-1 nil 3645134161 ("" (grind) nil nil)
   ((nnmeasurement nonempty-type-eq-decl nil measurements nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (system_enum type-decl nil measurements nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqrt const-decl "{m: nnmeasurement | system_match?(x, m)}"
          measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (expt def-decl "{m: valid_measurement | x`system = m`system}"
          measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (^ const-decl "{m: valid_measurement | system_match?(x, m)}"
     measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (base_value const-decl "real" measurements nil)
    (= const-decl "bool" measurements nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (abs_TCC1 0
  (abs_TCC1-1 nil 3645219064 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil
   (abs subtype
        "measurements.x WITH [`value := real_defs.abs(measurements.x`value)]"
        "{m: measurements.nnmeasurement | measurements.unit_match?(measurements.x, m)}"))))

