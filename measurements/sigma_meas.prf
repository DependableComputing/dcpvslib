(sigma_meas
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3665846816
   ("" (skeep)
    (("" (typepred "low" "high")
      (("" (grind)
        (("1"
          (lemma "connected_domain" ("x" "low" "y" "j!1" "z" "high"))
          (("1" (grind) nil nil)) nil)
         ("2"
          (lemma "connected_domain" ("x" "j!1" "y" "j!2" "z" "low"))
          (("2"
            (lemma "connected_domain" ("x" "low" "y" "j!2" "z" "high"))
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma_meas nil)
    (T_low type-eq-decl nil sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3665846816
   ("" (skeep)
    (("" (typepred "low" "high")
      (("" (inst 3 "high")
        (("1" (assert) nil nil)
         ("2" (grind)
          (("1"
            (lemma "connected_domain" ("x" "low" "y" "j!1" "z" "high"))
            (("1" (grind) nil nil)) nil)
           ("2"
            (lemma "connected_domain" ("x" "low" "y" "j!2" "z" "high"))
            (("1"
              (lemma "connected_domain"
               ("x" "j!1" "y" "j!2" "z" "low"))
              (("1" (grind) nil nil)) nil)
             ("2"
              (lemma "connected_domain"
               ("x" "j!1" "y" "j!2" "z" "low"))
              (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma_meas nil)
    (T_low type-eq-decl nil sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   nil))
 (sigma_TCC3 0
  (sigma_TCC3-1 nil 3665846816 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma_meas nil)
    (T_high type-eq-decl nil sigma_meas nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (unit_match? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (dimension_match? const-decl "bool" measurements nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (sigma_TCC4 0
  (sigma_TCC4-1 nil 3665846816 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma_meas nil)
    (T_high type-eq-decl nil sigma_meas nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (valid_measurement nonempty-type-eq-decl nil measurements nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (dimension_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (sigma_TCC5 0
  (sigma_TCC5-1 nil 3665858675 ("" (subtype-tcc) nil nil) nil nil))
 (sigma_TCC6 0
  (sigma_TCC6-1 nil 3665858675 ("" (subtype-tcc) nil nil) nil nil)))

