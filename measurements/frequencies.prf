(frequencies
 (frequency_TCC1 0
  (frequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (frequency? const-decl "bool" frequencies nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (unit_frequency_TCC1 0
  (unit_frequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (negunit_frequency_TCC1 0
  (negunit_frequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (unit_frequency const-decl "frequency" frequencies nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (nonzero_frequency_TCC1 0
  (nonzero_frequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (unit_frequency const-decl "frequency" frequencies nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (nonneg_frequency_TCC1 0
  (nonneg_frequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (nonpos_frequency_TCC1 0
  (nonpos_frequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (posfrequency_TCC1 0
  (posfrequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (unit_frequency const-decl "frequency" frequencies nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (negfrequency_TCC1 0
  (negfrequency_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (negunit_frequency const-decl "frequency" frequencies nil)
    (unit_frequency const-decl "frequency" frequencies nil)
    (zero_frequency const-decl "frequency" frequencies nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (frequency_plus_frequency_is_frequency_TCC1 0
  (frequency_plus_frequency_is_frequency_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (frequency_plus_frequency_is_frequency_TCC2 0
  (frequency_plus_frequency_is_frequency_TCC2-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (explicit_system? const-decl "bool" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (frequency_plus_frequency_is_frequency 0
  (frequency_plus_frequency_is_frequency-1 nil 3641300630
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (+ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (frequency_minus_frequency_is_frequency 0
  (frequency_minus_frequency_is_frequency-1 nil 3641300630
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (system_match? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (preferred_system? const-decl "bool" measurements nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (real_times_frequency_is_frequency 0
  (real_times_frequency_is_frequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (frequency_div_nzreal_is_frequency 0
  (frequency_div_nzreal_is_frequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (neg_frequency_is_frequency 0
  (neg_frequency_is_frequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (frequency_div_frequency_is_dimensionless_TCC1 0
  (frequency_div_frequency_is_dimensionless_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (frequency_div_frequency_is_dimensionless 0
  (frequency_div_frequency_is_dimensionless-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil))
   nil))
 (time_times_frequency_is_dimensionless_TCC1 0
  (time_times_frequency_is_dimensionless_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (time_times_frequency_is_dimensionless_TCC2 0
  (time_times_frequency_is_dimensionless_TCC2-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (time_times_frequency_is_dimensionless 0
  (time_times_frequency_is_dimensionless-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil))
   nil))
 (real_div_time_is_frequency_TCC1 0
  (real_div_time_is_frequency_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (number nonempty-type-decl nil numbers nil)
    (nztime nonempty-type-eq-decl nil times nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (real_div_time_is_frequency 0
  (real_div_time_is_frequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (nztime nonempty-type-eq-decl nil times nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (real_div_frequency_is_time_TCC1 0
  (real_div_frequency_is_time_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (real_div_frequency_is_time 0
  (real_div_frequency_is_time-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (time? const-decl "bool" times nil))
   nil))
 (dimensionless_div_time_is_frequency_TCC1 0
  (dimensionless_div_time_is_frequency_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil)
    (dimensionless nonempty-type-eq-decl nil dimensionlesses nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (dimensionless_div_time_is_frequency_TCC2 0
  (dimensionless_div_time_is_frequency_TCC2-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil)
    (dimensionless nonempty-type-eq-decl nil dimensionlesses nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (number nonempty-type-decl nil numbers nil)
    (nztime nonempty-type-eq-decl nil times nil)
    (system_match? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (dimensionless_div_time_is_frequency 0
  (dimensionless_div_time_is_frequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil)
    (dimensionless nonempty-type-eq-decl nil dimensionlesses nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (number nonempty-type-decl nil numbers nil)
    (nztime nonempty-type-eq-decl nil times nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (preferred_system? const-decl "bool" measurements nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (frequency? const-decl "bool" frequencies nil))
   nil))
 (dimensionless_div_frequency_is_time_TCC1 0
  (dimensionless_div_frequency_is_time_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil)
    (dimensionless nonempty-type-eq-decl nil dimensionlesses nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (dimensionless_div_frequency_is_time 0
  (dimensionless_div_frequency_is_time-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil)
    (dimensionless nonempty-type-eq-decl nil dimensionlesses nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (preferred_system? const-decl "bool" measurements nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (explicit_system? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (time? const-decl "bool" times nil))
   nil))
 (Hz_TCC1 0
  (Hz_TCC1-1 nil 3641300630 ("" (subtype-tcc) nil nil)
   ((valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (Hz_TCC2 0
  (Hz_TCC2-1 nil 3641300630
   ("" (typepred "s") (("" (expand "/") (("" (field) nil nil)) nil))
    nil)
   ((/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (FDX_2 skolem-const-decl "real" frequencies nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (postime nonempty-type-eq-decl nil times nil)
    (s const-decl "postime" times nil))
   nil))
 (s_times_Hz_is_unitary_TCC1 0
  (s_times_Hz_is_unitary_TCC1-1 nil 3645152898
   ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (s const-decl "postime" times nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (s_times_Hz_is_unitary_TCC2 0
  (s_times_Hz_is_unitary_TCC2-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (real_div_time_is_frequency application-judgement "frequency"
     frequencies nil)
    (system_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (Hz const-decl "posfrequency" frequencies nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (s_times_Hz_is_unitary_TCC3 0
  (s_times_Hz_is_unitary_TCC3-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil))
   nil))
 (s_times_Hz_is_unitary 0
  (s_times_Hz_is_unitary-1 nil 3641300745
   ("" (typepred "s" "Hz") (("" (grind) nil nil)) nil)
   ((zero_measurement const-decl "measurement" measurements nil)
    (zero_time const-decl "time" times nil)
    (unit_time const-decl "time" times nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (* const-decl "{m: valid_measurement | system_match?(x, m)}"
       measurements nil)
    (unit_measurement const-decl "valid_measurement" measurements nil)
    (system_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (comparable? const-decl "bool" measurements nil)
    (= const-decl "bool" measurements nil)
    (unit_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (time_times_frequency_is_dimensionless application-judgement
     "dimensionless" frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_time_is_frequency application-judgement "frequency"
     frequencies nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (postime nonempty-type-eq-decl nil times nil)
    (s const-decl "postime" times nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (posfrequency nonempty-type-eq-decl nil frequencies nil)
    (Hz const-decl "posfrequency" frequencies nil))
   shostak))
 (RPM_TCC1 0
  (RPM_TCC1-1 nil 3646084240 ("" (subtype-tcc) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (frequency? const-decl "bool" frequencies nil)
    (valid_measurement? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_time_is_frequency application-judgement "frequency"
     frequencies nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (Hz const-decl "posfrequency" frequencies nil)
    (/ const-decl "{m: valid_measurement | system_match?(y, m)}"
       measurements nil)
    (s const-decl "postime" times nil)
    (unit_time const-decl "time" times nil)
    (zero_time const-decl "time" times nil)
    (zero_measurement const-decl "measurement" measurements nil))
   nil))
 (nzreal_times_nzfrequency_is_nzfrequency_TCC1 0
  (nzreal_times_nzfrequency_is_nzfrequency_TCC1-1 nil 3646733190
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (frequency? const-decl "bool" frequencies nil)
    (frequency nonempty-type-eq-decl nil frequencies nil)
    (number nonempty-type-decl nil numbers nil)
    (nzfrequency nonempty-type-eq-decl nil frequencies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     dimensionlesses nil)
    (/= const-decl "boolean" notequal nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (valid_measurement? const-decl "bool" measurements nil))
   nil))
 (nzreal_times_nzfrequency_is_nzfrequency 0
  (nzreal_times_nzfrequency_is_nzfrequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((* const-decl "{m: valid_measurement | unit_match?(y, m)}"
       measurements nil))
   nil))
 (nzfrequency_div_nzreal_is_nzfrequency 0
  (nzfrequency_div_nzreal_is_nzfrequency-1 nil 3641300630
   ("" (judgement-tcc) nil nil)
   ((/ const-decl "{m: valid_measurement | unit_match?(x, m)}"
       measurements nil))
   nil)))

