%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Definition of conversions between systems of units %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

transmutations: THEORY
BEGIN

  IMPORTING measurements;

  transmutation: NONEMPTY_TYPE =
    [#
      to_factor:   {n: nzmeasurement | explicit_system?(n)},
      from_factor: {n: nzmeasurement | explicit_system?(n) AND to_factor`system /= n`system}
     #] CONTAINING
    (#
      to_factor   := unit_measurement WITH [`system := METRIC],
      from_factor := unit_measurement WITH [`system := IMPERIAL]
     #);

  % Transmutation involves multiplying a measurement by the to_factor and
  % then dividing by the from_factor
  transmute(meas: {n: valid_measurement | n`system /= NOT_APPLICABLE},
            t: {c: transmutation | c`from_factor`system = meas`system}):
    valid_measurement =
      (#
        value   := meas`value * t`to_factor`value / t`from_factor`value,
        system  := t`to_factor`system,
        scaling := meas`scaling * t`to_factor`scaling / t`from_factor`scaling,
        length_dim  := meas`length_dim  + t`to_factor`length_dim
                                        - t`from_factor`length_dim,
        time_dim    := meas`time_dim    + t`to_factor`time_dim
                                        - t`from_factor`time_dim,
        mass_dim    := meas`mass_dim    + t`to_factor`mass_dim
                                        - t`from_factor`mass_dim,
        current_dim := meas`current_dim + t`to_factor`current_dim
                                        - t`from_factor`current_dim,
        temp_dim    := meas`temp_dim    + t`to_factor`temp_dim
                                        - t`from_factor`temp_dim,
        intens_dim  := meas`intens_dim  + t`to_factor`intens_dim
                                        - t`from_factor`intens_dim,
        angle_dim   := meas`angle_dim   + t`to_factor`angle_dim
                                        - t`from_factor`angle_dim
       #);

  % Multiply = transmute, can be in either order
  *(meas: {n: valid_measurement | n`system /= NOT_APPLICABLE},
    t: {c: transmutation | c`from_factor`system = meas`system}):
      valid_measurement = transmute(meas, t);

  *(t: transmutation,
    meas: {n: valid_measurement | n`system = t`from_factor`system}):
      valid_measurement = transmute(meas, t);

  commutative_mult: LEMMA
    FORALL(t: transmutation,
           meas: {n: valid_measurement | n`system = t`from_factor`system}):
      t * meas = meas * t;

  % Multiplication is not associative because t * (x * y) will be valid even
  % when (t * x) * y is not.
  not_associative_mult: LEMMA
    EXISTS(t: transmutation,
           x: {n: valid_measurement | n`system = t`from_factor`system},
           y: {n: valid_measurement | system_match?(x, n)}):
      (t`from_factor`system = (x * y)`system) AND
      (t * x)`system /= y`system;

  % Dividing by a transmutation performs the inverse transmutation
  /(meas: {n: valid_measurement | n`system /= NOT_APPLICABLE},
    t: {c: transmutation | c`to_factor`system = meas`system}):
      valid_measurement =
        LET inv_t: transmutation =
          (# to_factor := t`from_factor, from_factor := t`to_factor #) IN
        transmute(meas, inv_t);

  % Dividing a transumtation by a measurement is an odd concept to consider.
  % However, it's simply one over the division with the reverse arguments.
  /(t: transmutation,
    meas: {n: nzmeasurement | n`system = t`to_factor`system}):
      valid_measurement = 1 / (meas / t);

  % Simple way of creating a transmutation from two otherwise incompatible measurements
  /(n: {m: nzmeasurement | explicit_system?(m)},
    d: {m: nzmeasurement | explicit_system?(m) AND n`system /= m`system}): transmutation =
    (# to_factor := n, from_factor := d #);

  div_is_inv_mult: LEMMA
    FORALL(t: transmutation,
           meas: {n: valid_measurement | n`system = t`from_factor`system}):
      (meas * t) / t = meas;

END transmutations
