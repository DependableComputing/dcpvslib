(volumes
 (volume_TCC1 0
  (volume_TCC1-1 nil 3639477247 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil))
   nil))
 (unit_volume_TCC1 0
  (unit_volume_TCC1-1 nil 3639477247 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil))
   nil))
 (negunit_volume_TCC1 0
  (negunit_volume_TCC1-1 nil 3639477247 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (unit_volume const-decl "volume" volumes nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil))
   nil))
 (nonzero_volume_TCC1 0
  (nonzero_volume_TCC1-1 nil 3639245503 ("" (grind) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (unit_volume const-decl "volume" volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil))
   nil))
 (nonneg_volume_TCC1 0
  (nonneg_volume_TCC1-1 nil 3639300393 ("" (grind) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nonpos_volume_TCC1 0
  (nonpos_volume_TCC1-1 nil 3639300393 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (posvolume_TCC1 0
  (posvolume_TCC1-1 nil 3639477247 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (unit_volume const-decl "volume" volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (negvolume_TCC1 0
  (negvolume_TCC1-1 nil 3639477247 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_volume const-decl "volume" volumes nil)
    (unit_volume const-decl "volume" volumes nil)
    (negunit_volume const-decl "volume" volumes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (volume_plus_volume_is_volume 0
  (volume_plus_volume_is_volume-1 nil 3639245503 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (unit_match? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil))
   nil))
 (volume_minus_volume_is_volume 0
  (volume_minus_volume_is_volume-1 nil 3639245503 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (unit_match? const-decl "bool" measurements nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil))
   nil))
 (real_times_volume_is_volume 0
  (real_times_volume_is_volume-1 nil 3639245503 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil))
   nil))
 (volume_div_nzreal_is_volume 0
  (volume_div_nzreal_is_volume-1 nil 3639245503 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil))
   nil))
 (neg_volume_is_volume 0
  (neg_volume_is_volume-1 nil 3639245503 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil))
   nil))
 (length_times_area_is_volume 0
  (length_times_area_is_volume-1 nil 3639245617 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (length? const-decl "bool" lengths nil)
    (length nonempty-type-eq-decl nil lengths nil)
    (area? const-decl "bool" areas nil)
    (area nonempty-type-eq-decl nil areas nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (volume? const-decl "bool" volumes nil))
   nil))
 (volume_div_area_is_length 0
  (volume_div_area_is_length-1 nil 3639477247
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume? const-decl "bool" volumes nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (area? const-decl "bool" areas nil)
    (area nonempty-type-eq-decl nil areas nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzarea nonempty-type-eq-decl nil areas nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (length? const-decl "bool" lengths nil))
   nil))
 (volume_div_length_is_area 0
  (volume_div_length_is_area-1 nil 3639477247
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (volume? const-decl "bool" volumes nil)
    (volume nonempty-type-eq-decl nil volumes nil)
    (length? const-decl "bool" lengths nil)
    (length nonempty-type-eq-decl nil lengths nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzlength nonempty-type-eq-decl nil lengths nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     volumes nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (area? const-decl "bool" areas nil))
   nil))
 (nzreal_times_nzvolume_is_nzvolume 0
  (nzreal_times_nzvolume_is_nzvolume-1 nil 3639300393
   ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil))
   nil))
 (nzvolume_div_nzreal_is_nzvolume 0
  (nzvolume_div_nzreal_is_nzvolume-1 nil 3639300393
   ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" volumes nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil))
   nil)))

