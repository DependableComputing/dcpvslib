(rotational_inertias
 (rotational_inertia_TCC1 0
  (rotational_inertia_TCC1-1 nil 3643126489 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil))
   nil))
 (unit_rotational_inertia_TCC1 0
  (unit_rotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil))
   nil))
 (negunit_rotational_inertia_TCC1 0
  (negunit_rotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (unit_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil))
   nil))
 (nonzero_rotational_inertia_TCC1 0
  (nonzero_rotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (unit_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil))
   nil))
 (nonneg_rotational_inertia_TCC1 0
  (nonneg_rotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nonpos_rotational_inertia_TCC1 0
  (nonpos_rotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (posrotational_inertia_TCC1 0
  (posrotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (unit_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (negrotational_inertia_TCC1 0
  (negrotational_inertia_TCC1-1 nil 3643126489
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (zero_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (unit_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (negunit_rotational_inertia const-decl "rotational_inertia"
     rotational_inertias nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (rotational_inertia_plus_rotational_inertia_is_rotational_inertia 0
  (rotational_inertia_plus_rotational_inertia_is_rotational_inertia-1
   nil 3643126489 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (rotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (unit_match? const-decl "bool" measurements nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil))
   nil))
 (rotational_inertia_minus_rotational_inertia_is_rotational_inertia 0
  (rotational_inertia_minus_rotational_inertia_is_rotational_inertia-1
   nil 3643126489 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (rotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (unit_match? const-decl "bool" measurements nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil))
   nil))
 (real_times_rotational_inertia_is_rotational_inertia 0
  (real_times_rotational_inertia_is_rotational_inertia-1 nil 3643126489
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (rotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil))
   nil))
 (rotational_inertia_div_nzreal_is_rotational_inertia 0
  (rotational_inertia_div_nzreal_is_rotational_inertia-1 nil 3643126489
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (rotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil))
   nil))
 (neg_rotational_inertia_is_rotational_inertia 0
  (neg_rotational_inertia_is_rotational_inertia-1 nil 3643126489
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (rotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil))
   nil))
 (rotational_inertia_div_rotational_inertia_is_dimensionless 0
  (rotational_inertia_div_rotational_inertia_is_dimensionless-1 nil
   3643126489 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil)
    (rotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzrotational_inertia nonempty-type-eq-decl nil rotational_inertias
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil)
    (zero_mass const-decl "mass" masses nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (dimensionless? const-decl "bool" dimensionlesses nil))
   nil))
 (mass_times_area_is_rotational_inertia 0
  (mass_times_area_is_rotational_inertia-1 nil 3643126489
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (mass? const-decl "bool" masses nil)
    (mass nonempty-type-eq-decl nil masses nil)
    (area? const-decl "bool" areas nil)
    (area nonempty-type-eq-decl nil areas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     rotational_inertias nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_mass const-decl "mass" masses nil)
    (dimension_match? const-decl "bool" measurements nil)
    (rotational_inertia? const-decl "bool" rotational_inertias nil))
   nil))
 (nzreal_times_nzrotational_inertia_is_nzrotational_inertia 0
  (nzreal_times_nzrotational_inertia_is_nzrotational_inertia-1 nil
   3643126489 ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil))
   nil))
 (nzrotational_inertia_div_nzreal_is_nzrotational_inertia 0
  (nzrotational_inertia_div_nzreal_is_nzrotational_inertia-1 nil
   3643126489 ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" rotational_inertias nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil))
   nil)))

