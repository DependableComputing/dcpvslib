(accelerations
 (acceleration_TCC1 0
  (acceleration_TCC1-1 nil 3639502527 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil))
   nil))
 (unit_acceleration_TCC1 0
  (unit_acceleration_TCC1-1 nil 3639502527 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil))
   nil))
 (negunit_acceleration_TCC1 0
  (negunit_acceleration_TCC1-1 nil 3639502527
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (unit_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil))
   nil))
 (nonzero_acceleration_TCC1 0
  (nonzero_acceleration_TCC1-1 nil 3639298839
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (unit_acceleration const-decl "acceleration" accelerations nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil))
   nil))
 (nonneg_acceleration_TCC1 0
  (nonneg_acceleration_TCC1-1 nil 3639300136 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" accelerations nil))
   nil))
 (nonpos_acceleration_TCC1 0
  (nonpos_acceleration_TCC1-1 nil 3639300136 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_length const-decl "length" lengths nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" accelerations nil))
   nil))
 (posacceleration_TCC1 0
  (posacceleration_TCC1-1 nil 3639502527 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (unit_acceleration const-decl "acceleration" accelerations nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (negacceleration_TCC1 0
  (negacceleration_TCC1-1 nil 3639502527 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (unit_acceleration const-decl "acceleration" accelerations nil)
    (negunit_acceleration const-decl "acceleration" accelerations nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (acceleration_plus_acceleration_is_acceleration 0
  (acceleration_plus_acceleration_is_acceleration-1 nil 3639298839
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil))
   nil))
 (acceleration_minus_acceleration_is_acceleration 0
  (acceleration_minus_acceleration_is_acceleration-1 nil 3639298839
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil))
   nil))
 (real_times_acceleration_is_acceleration 0
  (real_times_acceleration_is_acceleration-1 nil 3639298839
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil))
   nil))
 (acceleration_div_nzreal_is_acceleration 0
  (acceleration_div_nzreal_is_acceleration-1 nil 3639298839
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil))
   nil))
 (neg_acceleration_is_acceleration 0
  (neg_acceleration_is_acceleration-1 nil 3639298839
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil))
   nil))
 (speed_over_time_is_acceleration 0
  (speed_over_time_is_acceleration-1 nil 3639298839
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (speed? const-decl "bool" speeds nil)
    (speed nonempty-type-eq-decl nil speeds nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nztime nonempty-type-eq-decl nil times nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (acceleration? const-decl "bool" accelerations nil))
   nil))
 (acceleration_times_time_is_speed 0
  (acceleration_times_time_is_speed-1 nil 3639314367
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (time? const-decl "bool" times nil)
    (time nonempty-type-eq-decl nil times nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (speed? const-decl "bool" speeds nil))
   nil))
 (nzreal_times_nzacceleration_is_nzacceleration 0
  (nzreal_times_nzacceleration_is_nzacceleration-1 nil 3639300136
   ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil))
   nil))
 (nzacceleration_div_nzreal_is_nzacceleration 0
  (nzacceleration_div_nzreal_is_nzacceleration-1 nil 3639300136
   ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil))
   nil))
 (sqrt_accel_times_length_is_nnspeed_TCC1 0
  (sqrt_accel_times_length_is_nnspeed_TCC1-1 nil 3639688547
   ("" (grind) (("" (field) nil nil)) nil)
   ((pos_times_ge formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnacceleration nonempty-type-eq-decl nil accelerations nil)
    (length? const-decl "bool" lengths nil)
    (length nonempty-type-eq-decl nil lengths nil)
    (nnlength nonempty-type-eq-decl nil lengths nil)
    (* const-decl "measurement" measurements nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" accelerations nil))
   nil))
 (sqrt_accel_times_length_is_nnspeed 0
  (sqrt_accel_times_length_is_nnspeed-1 nil 3639688567
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnacceleration nonempty-type-eq-decl nil accelerations nil)
    (length? const-decl "bool" lengths nil)
    (length nonempty-type-eq-decl nil lengths nil)
    (nnlength nonempty-type-eq-decl nil lengths nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     accelerations nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (S formal-const-decl "system_enum" accelerations nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "measurement" measurements nil)
    (sqrt const-decl "nnmeasurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (dimension_match? const-decl "bool" measurements nil)
    (speed? const-decl "bool" speeds nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak)))

