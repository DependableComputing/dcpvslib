("measurements" measurements caret_TCC4 0 (caret_TCC4-1 nil 3646662772 ("" (skeep) (("" (typepred "x" "i") (("" (case "explicit_system?(x)") (("1" (grind) nil nil) ("2" (case "x`system = ANY") (("1" (grind) nil nil) ("2" (case "x`system = NOT_APPLICABLE") (("1" (hide 1 2) (("1" (case "(1 / expt(x, -i))`system = NOT_APPLICABLE") (("1" (expand "system_match?") (("1" (assert) nil nil)) nil) ("2" (case "expt(x, -i)`system = NOT_APPLICABLE") (("1" (name-replace "e" "expt(x, -i)") (("1" (hide -2 -3 -4 2 3) (("1" (grind) nil nil)) nil)) nil) ("2" (lemma "nat_induction" ("p" "LAMBDA (j: nat): FORALL(a: {m: valid_measurement | m`system = NOT_APPLICABLE}): expt(a, j)`system = NOT_APPLICABLE")) (("2" (split) (("1" (inst -1 "-i") (("1" (inst -1 "x") nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (skeep) (("3" (skeep) (("3" (inst -1 "a") (("3" (expand "expt" 1) (("3" (expand "*" 1) (("3" (hide -3 -4 2 3 4 5) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil) ("2" (hide - 4 5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (zero_value? const-decl "bool" measurements nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (ANY? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (ANY adt-constructor-decl "(ANY?)" measurements nil) (i skolem-const-decl "{i: int | NOT (zero_value?(x)) OR i >= 0}" measurements nil) (x skolem-const-decl "valid_measurement" measurements nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (NOT_APPLICABLE adt-constructor-decl "(NOT_APPLICABLE?)" measurements nil) (NOT_APPLICABLE? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (system_match? const-decl "bool" measurements nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (preferred_system? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (/= const-decl "boolean" notequal nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_plus_real_is_real application-judgement "real" reals nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil) (explicit_system? const-decl "bool" measurements nil)) nil))("measurements" measurements caret_TCC3 0 (caret_TCC3-1 nil 3645225232 ("" (skeep) (("" (typepred "x" "i" "expt(x, -i)") (("1" (split -2) (("1" (expand "zero_value?") (("1" (lemma "nat_induction" ("p" "LAMBDA (j: nat): FORALL(a: {m: valid_measurement | m`value /= 0}): expt(a, j)`value /= 0")) (("1" (split) (("1" (inst -1 "-i") (("1" (inst -1 "x") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) (("2" (skeep) (("2" (typepred "a") (("2" (expand "expt" -3) (("2" (expand "unit_measurement") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep) (("3" (skeep) (("3" (inst -1 "a") (("3" (expand "expt" -2) (("3" (expand "*" -2) (("3" (typepred "a") (("3" (field) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (zero_value? const-decl "bool" measurements nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (i skolem-const-decl "{i: int | NOT (zero_value?(x)) OR i >= 0}" measurements nil) (x skolem-const-decl "valid_measurement" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil)) nil))("measurements" measurements expt_TCC5 0 (expt_TCC5-1 nil 3646662772 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil)) nil))("measurements" measurements expt_TCC4 0 (expt_TCC4-1 nil 3646662772 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements expt_TCC3 0 (expt_TCC3-1 nil 3645133710 ("" (subtype-tcc) nil nil) nil nil))("measurements" measurements divide_TCC5 0 (divide_TCC5-1 nil 3645225232 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (minus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements divide_TCC4 0 (divide_TCC4-1 nil 3645225232 ("" (subtype-tcc) nil nil) nil nil))("measurements" measurements divide_TCC3 0 (divide_TCC3-1 nil 3645225232 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil)) nil))("measurements" measurements inverse_mult_TCC2 0 (inverse_mult_TCC2-1 nil 3646655874 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (/= const-decl "boolean" notequal nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements inverse_mult_TCC1 0 (inverse_mult_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (/= const-decl "boolean" notequal nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("measurements" measurements mr_associative_mult2_TCC2 0 (mr_associative_mult2_TCC2-1 nil 3645148549 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (* const-decl "{m: valid_measurement | unit_match?(x, m)}" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements mr_associative_mult2_TCC1 0 (mr_associative_mult2_TCC1-1 nil 3645148549 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (* const-decl "{m: valid_measurement | unit_match?(y, m)}" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements times_TCC3 0 (times_TCC3-1 nil 3645225232 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil)) nil))("measurements" measurements distributive_TCC3 0 (distributive_TCC3-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_plus_real_is_real application-judgement "real" reals nil) (preferred_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil)) nil))("measurements" measurements distributive_TCC2 0 (distributive_TCC2-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_match? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements associative_mult_TCC4 0 (associative_mult_TCC4-1 nil 3646652368 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_match? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (preferred_system? const-decl "bool" measurements nil) (real_plus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements associative_mult_TCC3 0 (associative_mult_TCC3-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_match? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements associative_mult_TCC2 0 (associative_mult_TCC2-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_match? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (preferred_system? const-decl "bool" measurements nil) (real_plus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements associative_mult_TCC1 0 (associative_mult_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_match? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements commutative_mult_TCC1 0 (commutative_mult_TCC1-1 nil 3645147249 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil)) nil))("measurements" measurements difference_TCC3 0 (difference_TCC3-1 nil 3646650359 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil)) nil))("measurements" measurements plus_TCC2 0 (plus_TCC2-1 nil 3646650359 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (explicit_system? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil)) nil))("measurements" measurements explicit_unit_match_transitive 0 (explicit_unit_match_transitive-1 nil 3665913891 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (dimension_match? const-decl "bool" measurements nil) (explicit_system_match? const-decl "bool" measurements nil) (explicit_unit_match? const-decl "bool" measurements nil)) shostak))("measurements" measurements unit_match_not_transitive 0 (unit_match_not_transitive-1 nil 3646652115 ("" (inst 1 "unit_measurement WITH [`system := METRIC]" "unit_measurement" "unit_measurement WITH [`system := IMPERIAL]") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ((unit_match? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (IMPERIAL? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (IMPERIAL adt-constructor-decl "(IMPERIAL?)" measurements nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (METRIC? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (METRIC adt-constructor-decl "(METRIC?)" measurements nil)) shostak))("measurements" measurements negunit_measurement_TCC1 0 (negunit_measurement_TCC1-1 nil 3646655874 ("" (subtype-tcc) nil nil) ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("measurements" measurements unit_measurement_TCC1 0 (unit_measurement_TCC1-1 nil 3646655874 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("measurements" measurements explicit_system_match_transitive 0 (explicit_system_match_transitive-1 nil 3666022800 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (explicit_system_match? const-decl "bool" measurements nil)) shostak))("measurements" measurements system_match_not_transitive 0 (system_match_not_transitive-1 nil 3646665114 ("" (inst 1 "zero_measurement WITH [`value := 1, `system := METRIC]" "zero_measurement" "zero_measurement WITH [`value := 1, `system := IMPERIAL]") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil) ((system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (IMPERIAL? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (IMPERIAL adt-constructor-decl "(IMPERIAL?)" measurements nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (METRIC? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (METRIC adt-constructor-decl "(METRIC?)" measurements nil)) shostak))("measurements" measurements valid_measurement_TCC1 0 (valid_measurement_TCC1-1 nil 3646653368 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("sigma_meas" sigma_meas sigma_TCC6 0 (sigma_TCC6-1 nil 3665858675 ("" (subtype-tcc) nil nil) ((S formal-const-decl "system_enum" sigma_meas nil) (system_enum type-decl nil measurement_systems nil) (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements nil) (dimension_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil)) nil))("dimensionlesses" dimensionlesses dimensionless_div_nzdimensionless_is_dimensionless_TCC1 0 (dimensionless_div_nzdimensionless_is_dimensionless_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (number nonempty-type-decl nil numbers nil) (nzdimensionless nonempty-type-eq-decl nil dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("dimensionlesses" dimensionlesses dimensionless_times_dimensionless_is_dimensionless_TCC1 0 (dimensionless_times_dimensionless_is_dimensionless_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("dimensionlesses" dimensionlesses dimensionless_plus_dimensionless_is_dimensionless_TCC2 0 (dimensionless_plus_dimensionless_is_dimensionless_TCC2-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (unit_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("dimensionlesses" dimensionlesses dimensionless_plus_dimensionless_is_dimensionless_TCC1 0 (dimensionless_plus_dimensionless_is_dimensionless_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("lengths" lengths ft_TCC1 0 (ft_TCC1-1 nil 3642755863 ("" (subtype-tcc) nil nil) ((length? const-decl "bool" lengths nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("lengths" lengths nzreal_times_nzlength_is_nzlength_TCC1 0 (nzreal_times_nzlength_is_nzlength_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (number nonempty-type-decl nil numbers nil) (nzlength nonempty-type-eq-decl nil lengths nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("lengths" lengths mm_TCC1 0 (mm_TCC1-1 nil 3646734173 ("" (subtype-tcc) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (length? const-decl "bool" lengths nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("lengths" lengths cm_TCC1 0 (cm_TCC1-1 nil 3639836391 ("" (subtype-tcc) nil nil) ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (length? const-decl "bool" lengths nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("lengths" lengths length_div_length_is_dimensionless_TCC2 0 (length_div_length_is_dimensionless_TCC2-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (number nonempty-type-decl nil numbers nil) (nzdimensionless nonempty-type-eq-decl nil dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("lengths" lengths length_div_length_is_dimensionless_TCC1 0 (length_div_length_is_dimensionless_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("lengths" lengths length_plus_length_is_length_TCC2 0 (length_plus_length_is_length_TCC2-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("lengths" lengths length_plus_length_is_length_TCC1 0 (length_plus_length_is_length_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("lengths" lengths m_TCC1 0 (m_TCC1-1 nil 3645152485 ("" (subtype-tcc) nil nil) ((length? const-decl "bool" lengths nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("masses" masses slug_TCC1 0 (slug_TCC1-1 nil 3645153606 ("" (subtype-tcc) nil nil) ((mass? const-decl "bool" masses nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("masses" masses kg_TCC1 0 (kg_TCC1-1 nil 3642688643 ("" (subtype-tcc) nil nil) ((mass? const-decl "bool" masses nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("masses" masses nzreal_times_nzmass_is_nzmass_TCC1 0 (nzreal_times_nzmass_is_nzmass_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (number nonempty-type-decl nil numbers nil) (nzmass nonempty-type-eq-decl nil masses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("masses" masses mass_div_mass_is_dimensionless_TCC1 0 (mass_div_mass_is_dimensionless_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (number nonempty-type-decl nil numbers nil) (nzmass nonempty-type-eq-decl nil masses nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("masses" masses mass_plus_mass_is_mass_TCC2 0 (mass_plus_mass_is_mass_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("masses" masses mass_plus_mass_is_mass_TCC1 0 (mass_plus_mass_is_mass_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("masses" masses g_TCC1 0 (g_TCC1-1 nil 3645153606 ("" (subtype-tcc) nil nil) ((mass? const-decl "bool" masses nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("times" times posreal_times_postime_is_postime_TCC1 0 (posreal_times_postime_is_postime_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (postime nonempty-type-eq-decl nil times nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("times" times nzreal_times_nztime_is_nztime_TCC1 0 (nzreal_times_nztime_is_nztime_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("times" times time_div_time_is_dimensionless_TCC1 0 (time_div_time_is_dimensionless_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("times" times time_plus_time_is_time_TCC2 0 (time_plus_time_is_time_TCC2-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("times" times time_plus_time_is_time_TCC1 0 (time_plus_time_is_time_TCC1-1 nil 3646733189 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles two_pi_radians_is_360_degrees_TCC4 0 (two_pi_radians_is_360_degrees_TCC4-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_angle const-decl "angle" angles nil) (unit_angle const-decl "angle" angles nil) (Integral const-decl "real" integral_def "analysis/") (atan_value const-decl "real" atan "trig_fnd/") (pi const-decl "posreal" atan "trig_fnd/") (degree_scaling const-decl "posreal" angles nil) (degree const-decl "(degree?)" angles nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("angles" angles two_pi_radians_is_360_degrees_TCC3 0 (two_pi_radians_is_360_degrees_TCC3-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((Integral const-decl "real" integral_def "analysis/") (atan_value const-decl "real" atan "trig_fnd/") (pi const-decl "posreal" atan "trig_fnd/") (zero_measurement const-decl "measurement" measurements nil) (zero_angle const-decl "angle" angles nil) (unit_angle const-decl "angle" angles nil) (radian const-decl "(radian?)" angles nil) (* const-decl "{m: valid_measurement | unit_match?(y, m)}" measurements nil) (degree_scaling const-decl "posreal" angles nil) (degree const-decl "(degree?)" angles nil) (radians_to_degrees const-decl "(degree?)" angles nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil)) nil))("angles" angles two_pi_radians_is_360_degrees_TCC2 0 (two_pi_radians_is_360_degrees_TCC2-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((Integral const-decl "real" integral_def "analysis/") (atan_value const-decl "real" atan "trig_fnd/") (pi const-decl "posreal" atan "trig_fnd/") (zero_measurement const-decl "measurement" measurements nil) (zero_angle const-decl "angle" angles nil) (unit_angle const-decl "angle" angles nil) (radian const-decl "(radian?)" angles nil) (* const-decl "{m: valid_measurement | unit_match?(y, m)}" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (angle? const-decl "bool" angles nil) (radian? const-decl "bool" angles nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil)) nil))("angles" angles d2r_is_inv_r2d_TCC2 0 (d2r_is_inv_r2d_TCC2-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (radian? const-decl "bool" angles nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (angle? const-decl "bool" angles nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles d2r_is_inv_r2d_TCC1 0 (d2r_is_inv_r2d_TCC1-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((radian? const-decl "bool" angles nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (angle? const-decl "bool" angles nil) (zero_measurement const-decl "measurement" measurements nil) (zero_angle const-decl "angle" angles nil) (unit_angle const-decl "angle" angles nil) (radian const-decl "(radian?)" angles nil) (Integral const-decl "real" integral_def "analysis/") (atan_value const-decl "real" atan "trig_fnd/") (pi const-decl "posreal" atan "trig_fnd/") (degree_scaling const-decl "posreal" angles nil) (degree const-decl "(degree?)" angles nil) (radians_to_degrees const-decl "(degree?)" angles nil) (degrees_to_radians const-decl "(radian?)" angles nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) nil))("angles" angles r2d_is_inv_d2r_TCC2 0 (r2d_is_inv_d2r_TCC2-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (degree? const-decl "boolean" angles nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (angle? const-decl "bool" angles nil) (Integral const-decl "real" integral_def "analysis/") (atan_value const-decl "real" atan "trig_fnd/") (pi const-decl "posreal" atan "trig_fnd/") (degree_scaling const-decl "posreal" angles nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles r2d_is_inv_d2r_TCC1 0 (r2d_is_inv_d2r_TCC1-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((degree? const-decl "boolean" angles nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (angle? const-decl "bool" angles nil) (zero_measurement const-decl "measurement" measurements nil) (zero_angle const-decl "angle" angles nil) (unit_angle const-decl "angle" angles nil) (Integral const-decl "real" integral_def "analysis/") (atan_value const-decl "real" atan "trig_fnd/") (pi const-decl "posreal" atan "trig_fnd/") (degree_scaling const-decl "posreal" angles nil) (degree const-decl "(degree?)" angles nil) (radian const-decl "(radian?)" angles nil) (degrees_to_radians const-decl "(radian?)" angles nil) (radians_to_degrees const-decl "(degree?)" angles nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) nil))("angles" angles nzreal_times_nzangle_is_nzangle_TCC1 0 (nzreal_times_nzangle_is_nzangle_TCC1-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (angle? const-decl "bool" angles nil) (angle nonempty-type-eq-decl nil angles nil) (number nonempty-type-decl nil numbers nil) (nzangle nonempty-type-eq-decl nil angles nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles angle_div_angle_is_dimensionless_TCC2 0 (angle_div_angle_is_dimensionless_TCC2-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (number nonempty-type-decl nil numbers nil) (nzdimensionless nonempty-type-eq-decl nil dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles angle_div_angle_is_dimensionless_TCC1 0 (angle_div_angle_is_dimensionless_TCC1-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles angle_plus_angle_is_angle_TCC2 0 (angle_plus_angle_is_angle_TCC2-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (angle? const-decl "bool" angles nil) (angle nonempty-type-eq-decl nil angles nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("angles" angles angle_plus_angle_is_angle_TCC1 0 (angle_plus_angle_is_angle_TCC1-1 nil 3652714048 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (angle? const-decl "bool" angles nil) (angle nonempty-type-eq-decl nil angles nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies nzreal_times_nzfrequency_is_nzfrequency_TCC1 0 (nzreal_times_nzfrequency_is_nzfrequency_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (number nonempty-type-decl nil numbers nil) (nzfrequency nonempty-type-eq-decl nil frequencies nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies s_times_Hz_is_unitary_TCC3 0 (s_times_Hz_is_unitary_TCC3-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("frequencies" frequencies s_times_Hz_is_unitary_TCC2 0 (s_times_Hz_is_unitary_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_div_time_is_frequency application-judgement "frequency" frequencies nil) (system_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (Hz const-decl "posfrequency" frequencies nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("frequencies" frequencies s_times_Hz_is_unitary_TCC1 0 (s_times_Hz_is_unitary_TCC1-1 nil 3645152898 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("frequencies" frequencies dimensionless_div_frequency_is_time_TCC1 0 (dimensionless_div_frequency_is_time_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (number nonempty-type-decl nil numbers nil) (nzfrequency nonempty-type-eq-decl nil frequencies nil) (system_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies dimensionless_div_time_is_frequency_TCC2 0 (dimensionless_div_time_is_frequency_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies dimensionless_div_time_is_frequency_TCC1 0 (dimensionless_div_time_is_frequency_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (dimensionless? const-decl "bool" dimensionlesses nil) (dimensionless nonempty-type-eq-decl nil dimensionlesses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies real_div_frequency_is_time_TCC1 0 (real_div_frequency_is_time_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (number nonempty-type-decl nil numbers nil) (nzfrequency nonempty-type-eq-decl nil frequencies nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies real_div_time_is_frequency_TCC1 0 (real_div_time_is_frequency_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies time_times_frequency_is_dimensionless_TCC2 0 (time_times_frequency_is_dimensionless_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (system_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies time_times_frequency_is_dimensionless_TCC1 0 (time_times_frequency_is_dimensionless_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies frequency_div_frequency_is_dimensionless_TCC1 0 (frequency_div_frequency_is_dimensionless_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (number nonempty-type-decl nil numbers nil) (nzfrequency nonempty-type-eq-decl nil frequencies nil) (system_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies frequency_plus_frequency_is_frequency_TCC2 0 (frequency_plus_frequency_is_frequency_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (unit_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("frequencies" frequencies frequency_plus_frequency_is_frequency_TCC1 0 (frequency_plus_frequency_is_frequency_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (frequency? const-decl "bool" frequencies nil) (frequency nonempty-type-eq-decl nil frequencies nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas sqrt_area_is_length_TCC1 0 (sqrt_area_is_length_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (>= const-decl "bool" reals nil) (nnarea nonempty-type-eq-decl nil areas nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas nzreal_times_nzarea_is_nzarea_TCC1 0 (nzreal_times_nzarea_is_nzarea_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (number nonempty-type-decl nil numbers nil) (nzarea nonempty-type-eq-decl nil areas nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas area_div_length_is_length_TCC1 0 (area_div_length_is_length_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (number nonempty-type-decl nil numbers nil) (nzlength nonempty-type-eq-decl nil lengths nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas length_times_length_is_area_TCC2 0 (length_times_length_is_area_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas length_times_length_is_area_TCC1 0 (length_times_length_is_area_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas area_plus_area_is_area_TCC2 0 (area_plus_area_is_area_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("areas" areas area_plus_area_is_area_TCC1 0 (area_plus_area_is_area_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes cubic_meter_is_posvolume 0 (cubic_meter_is_posvolume-1 nil 3639494192 ("" (typepred "m") (("" (grind) (("" (field) nil nil)) nil)) nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (zero_measurement const-decl "measurement" measurements nil) (volume? const-decl "bool" volumes nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (poslength nonempty-type-eq-decl nil lengths nil) (m const-decl "poslength" lengths nil)) shostak))("volumes" volumes cubic_meter_is_posvolume_TCC2 0 (cubic_meter_is_posvolume_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_value? const-decl "bool" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("volumes" volumes cubic_meter_is_posvolume_TCC1 0 (cubic_meter_is_posvolume_TCC1-1 nil 3639494173 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (m const-decl "poslength" lengths nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("volumes" volumes nzreal_times_nzvolume_is_nzvolume_TCC1 0 (nzreal_times_nzvolume_is_nzvolume_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (number nonempty-type-decl nil numbers nil) (nzvolume nonempty-type-eq-decl nil volumes nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes volume_div_length_is_area_TCC1 0 (volume_div_length_is_area_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (number nonempty-type-decl nil numbers nil) (nzlength nonempty-type-eq-decl nil lengths nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes volume_div_area_is_length_TCC1 0 (volume_div_area_is_length_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (number nonempty-type-decl nil numbers nil) (nzarea nonempty-type-eq-decl nil areas nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes length_times_area_is_volume_TCC2 0 (length_times_area_is_volume_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes length_times_area_is_volume_TCC1 0 (length_times_area_is_volume_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes volume_plus_volume_is_volume_TCC2 0 (volume_plus_volume_is_volume_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volumes" volumes volume_plus_volume_is_volume_TCC1 0 (volume_plus_volume_is_volume_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("speeds" speeds speed_times_time_is_distance_TCC1 0 (speed_times_time_is_distance_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("speeds" speeds distance_per_time_is_speed_TCC2 0 (distance_per_time_is_speed_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("speeds" speeds distance_per_time_is_speed_TCC1 0 (distance_per_time_is_speed_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("speeds" speeds speed_plus_speed_is_speed_TCC2 0 (speed_plus_speed_is_speed_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (unit_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("speeds" speeds speed_plus_speed_is_speed_TCC1 0 (speed_plus_speed_is_speed_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times nzreal_times_nzvolume_per_time_is_nzvolume_per_time_TCC1 0 (nzreal_times_nzvolume_per_time_is_nzvolume_per_time_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume_per_time? const-decl "bool" volume_per_times nil) (volume_per_time nonempty-type-eq-decl nil volume_per_times nil) (number nonempty-type-decl nil numbers nil) (nzvolume_per_time nonempty-type-eq-decl nil volume_per_times nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_volume const-decl "volume" volumes nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times speed_times_area_is_volume_per_time_TCC2 0 (speed_times_area_is_volume_per_time_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (system_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times speed_times_area_is_volume_per_time_TCC1 0 (speed_times_area_is_volume_per_time_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times volume_over_time_is_volume_per_time_TCC2 0 (volume_over_time_is_volume_per_time_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times volume_over_time_is_volume_per_time_TCC1 0 (volume_over_time_is_volume_per_time_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume? const-decl "bool" volumes nil) (volume nonempty-type-eq-decl nil volumes nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times volume_per_time_plus_volume_per_time_is_volume_per_time_TCC2 0 (volume_per_time_plus_volume_per_time_is_volume_per_time_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume_per_time? const-decl "bool" volume_per_times nil) (volume_per_time nonempty-type-eq-decl nil volume_per_times nil) (unit_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_volume const-decl "volume" volumes nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("volume_per_times" volume_per_times volume_per_time_plus_volume_per_time_is_volume_per_time_TCC1 0 (volume_per_time_plus_volume_per_time_is_volume_per_time_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (volume_per_time? const-decl "bool" volume_per_times nil) (volume_per_time nonempty-type-eq-decl nil volume_per_times nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_volume const-decl "volume" volumes nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations sqrt_accel_times_length_is_nnspeed_TCC3 0 (sqrt_accel_times_length_is_nnspeed_TCC3-1 nil 3646733190 ("" (skeep) (("" (typepred "nnx" "nny") (("" (expand "*") (("" (field) nil nil)) nil)) nil)) nil) ((system_match? const-decl "bool" measurements nil) (nnlength nonempty-type-eq-decl nil lengths nil) (length nonempty-type-eq-decl nil lengths nil) (length? const-decl "bool" lengths nil) (nnacceleration nonempty-type-eq-decl nil accelerations nil) (>= const-decl "bool" reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (acceleration? const-decl "bool" accelerations nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (pos_times_ge formula-decl nil real_props nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil)) nil))("accelerations" accelerations sqrt_accel_times_length_is_nnspeed_TCC2 0 (sqrt_accel_times_length_is_nnspeed_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (>= const-decl "bool" reals nil) (nnacceleration nonempty-type-eq-decl nil accelerations nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (nnlength nonempty-type-eq-decl nil lengths nil) (system_match? const-decl "bool" measurements nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations nzreal_times_nzacceleration_is_nzacceleration_TCC1 0 (nzreal_times_nzacceleration_is_nzacceleration_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (number nonempty-type-decl nil numbers nil) (nzacceleration nonempty-type-eq-decl nil accelerations nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations acceleration_times_time_is_speed_TCC1 0 (acceleration_times_time_is_speed_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations speed_over_time_is_acceleration_TCC2 0 (speed_over_time_is_acceleration_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (number nonempty-type-decl nil numbers nil) (nztime nonempty-type-eq-decl nil times nil) (system_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations speed_over_time_is_acceleration_TCC1 0 (speed_over_time_is_acceleration_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (speed? const-decl "bool" speeds nil) (speed nonempty-type-eq-decl nil speeds nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations acceleration_plus_acceleration_is_acceleration_TCC2 0 (acceleration_plus_acceleration_is_acceleration_TCC2-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (unit_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("accelerations" accelerations acceleration_plus_acceleration_is_acceleration_TCC1 0 (acceleration_plus_acceleration_is_acceleration_TCC1-1 nil 3646733190 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("forces" forces lb_def 0 (lb_def-1 nil 3646735903 ("" (grind) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (slug const-decl "posmass" masses nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (ft const-decl "poslength" lengths nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (unit_measurement const-decl "valid_measurement" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (explicit_system? const-decl "bool" measurements nil) (preferred_system? const-decl "bool" measurements nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (lb const-decl "posforce" forces nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (unit_force const-decl "force" forces nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil) (comparable? const-decl "bool" measurements nil) (base_value const-decl "real" measurements nil) (= const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) shostak))("forces" forces lb_def_TCC2 0 (lb_def_TCC2-1 nil 3646735868 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (unit_force const-decl "force" forces nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("forces" forces lb_def_TCC1 0 (lb_def_TCC1-1 nil 3646735868 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (slug const-decl "posmass" masses nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (ft const-decl "poslength" lengths nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (explicit_system? const-decl "bool" measurements nil) (preferred_system? const-decl "bool" measurements nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (lb const-decl "posforce" forces nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("forces" forces lb_TCC4 0 (lb_TCC4-1 nil 3645153821 ("" (grind) nil nil) ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (force? const-decl "bool" forces nil) (zero_acceleration const-decl "acceleration" accelerations nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (preferred_system? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (ft const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (slug const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces lb_TCC3 0 (lb_TCC3-1 nil 3645153821 ("" (grind) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (ft const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (slug const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces lb_TCC2 0 (lb_TCC2-1 nil 3645153821 ("" (subtype-tcc) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (ft const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (slug const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces lb_TCC1 0 (lb_TCC1-1 nil 3642755864 ("" (grind) (("" (field) (("" (typepred "g" "m") (("" (case "(g`value * m`value) > 0") (("1" (field) nil nil) ("2" (field) nil nil)) nil)) nil)) nil)) nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (slug const-decl "posmass" masses nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("forces" forces N_def 0 (N_def-1 nil 3646735897 ("" (grind) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (g const-decl "posmass" masses nil) (kg const-decl "posmass" masses nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (m const-decl "poslength" lengths nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (unit_measurement const-decl "valid_measurement" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (explicit_system? const-decl "bool" measurements nil) (preferred_system? const-decl "bool" measurements nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (N const-decl "posforce" forces nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (unit_force const-decl "force" forces nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil) (comparable? const-decl "bool" measurements nil) (base_value const-decl "real" measurements nil) (= const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) shostak))("forces" forces N_def_TCC2 0 (N_def_TCC2-1 nil 3646735868 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (unit_force const-decl "force" forces nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("forces" forces N_def_TCC1 0 (N_def_TCC1-1 nil 3646735868 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (g const-decl "posmass" masses nil) (kg const-decl "posmass" masses nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (m const-decl "poslength" lengths nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (explicit_system? const-decl "bool" measurements nil) (preferred_system? const-decl "bool" measurements nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (N const-decl "posforce" forces nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("forces" forces N_TCC6 0 (N_TCC6-1 nil 3646733191 ("" (grind) nil nil) ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (force? const-decl "bool" forces nil) (zero_acceleration const-decl "acceleration" accelerations nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (preferred_system? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (kg const-decl "posmass" masses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces N_TCC5 0 (N_TCC5-1 nil 3646733191 ("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ((system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (kg const-decl "posmass" masses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces N_TCC4 0 (N_TCC4-1 nil 3645153821 ("" (grind) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_value? const-decl "bool" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces N_TCC3 0 (N_TCC3-1 nil 3642755612 ("" (typepred "g" "m" "s") (("" (grind) (("" (case "(g`value * m`value) / (s`value * s`value) > 0") (("1" (field) nil nil) ("2" (field) nil nil)) nil)) nil)) nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (posmass nonempty-type-eq-decl nil masses nil) (g const-decl "posmass" masses nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (poslength nonempty-type-eq-decl nil lengths nil) (m const-decl "poslength" lengths nil) (time? const-decl "bool" times nil) (time nonempty-type-eq-decl nil times nil) (postime nonempty-type-eq-decl nil times nil) (s const-decl "postime" times nil)) nil))("forces" forces N_TCC2 0 (N_TCC2-1 nil 3642755612 ("" (grind) (("" (typepred "s") (("" (field) nil nil)) nil)) nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (kg const-decl "posmass" masses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("forces" forces N_TCC1 0 (N_TCC1-1 nil 3642755612 ("" (grind) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (g const-decl "posmass" masses nil) (kg const-decl "posmass" masses nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("forces" forces nzreal_times_nzforce_is_nzforce_TCC1 0 (nzreal_times_nzforce_is_nzforce_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (number nonempty-type-decl nil numbers nil) (nzforce nonempty-type-eq-decl nil forces nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("forces" forces acceleration_times_mass_is_force_TCC2 0 (acceleration_times_mass_is_force_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (system_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("forces" forces acceleration_times_mass_is_force_TCC1 0 (acceleration_times_mass_is_force_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (acceleration? const-decl "bool" accelerations nil) (acceleration nonempty-type-eq-decl nil accelerations nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("forces" forces force_plus_force_is_force_TCC2 0 (force_plus_force_is_force_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (unit_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("forces" forces force_plus_force_is_force_TCC1 0 (force_plus_force_is_force_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("pressures" pressures nzreal_times_nzpressure_is_nzpressure_TCC1 0 (nzreal_times_nzpressure_is_nzpressure_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (pressure? const-decl "bool" pressures nil) (pressure nonempty-type-eq-decl nil pressures nil) (number nonempty-type-decl nil numbers nil) (nzpressure nonempty-type-eq-decl nil pressures nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("pressures" pressures force_over_area_is_pressure_TCC2 0 (force_over_area_is_pressure_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (number nonempty-type-decl nil numbers nil) (nzarea nonempty-type-eq-decl nil areas nil) (system_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("pressures" pressures force_over_area_is_pressure_TCC1 0 (force_over_area_is_pressure_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("pressures" pressures pressure_plus_pressure_is_pressure_TCC2 0 (pressure_plus_pressure_is_pressure_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (pressure? const-decl "bool" pressures nil) (pressure nonempty-type-eq-decl nil pressures nil) (unit_match? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("pressures" pressures pressure_plus_pressure_is_pressure_TCC1 0 (pressure_plus_pressure_is_pressure_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (pressure? const-decl "bool" pressures nil) (pressure nonempty-type-eq-decl nil pressures nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("pressures" pressures pa_def 0 (pa_def-1 nil 3646735510 ("" (grind) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (g const-decl "posmass" masses nil) (kg const-decl "posmass" masses nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (m const-decl "poslength" lengths nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (unit_measurement const-decl "valid_measurement" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (explicit_system? const-decl "bool" measurements nil) (preferred_system? const-decl "bool" measurements nil) (pa const-decl "pospressure" pressures nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (zero_pressure const-decl "pressure" pressures nil) (unit_pressure const-decl "pressure" pressures nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil) (comparable? const-decl "bool" measurements nil) (base_value const-decl "real" measurements nil) (= const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) shostak))("pressures" pressures pa_def_TCC2 0 (pa_def_TCC2-1 nil 3646735483 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (zero_pressure const-decl "pressure" pressures nil) (unit_pressure const-decl "pressure" pressures nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("pressures" pressures pa_def_TCC1 0 (pa_def_TCC1-1 nil 3646735483 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (g const-decl "posmass" masses nil) (kg const-decl "posmass" masses nil) (zero_length const-decl "length" lengths nil) (unit_length const-decl "length" lengths nil) (m const-decl "poslength" lengths nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (explicit_system? const-decl "bool" measurements nil) (preferred_system? const-decl "bool" measurements nil) (pa const-decl "pospressure" pressures nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("pressures" pressures pa_TCC6 0 (pa_TCC6-1 nil 3646735581 ("" (grind) nil nil) ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (pressure? const-decl "bool" pressures nil) (zero_force const-decl "force" forces nil) (zero_acceleration const-decl "acceleration" accelerations nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (preferred_system? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (kg const-decl "posmass" masses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("pressures" pressures pa_TCC5 0 (pa_TCC5-1 nil 3646735581 ("" (grind) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (^ const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (expt def-decl "{m: valid_measurement | x`system = m`system}" measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (/ const-decl "{m: valid_measurement | system_match?(y, m)}" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (kg const-decl "posmass" masses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("pressures" pressures pa_TCC4 0 (pa_TCC4-1 nil 3646735581 ("" (subtype-tcc) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_value? const-decl "bool" measurements nil) (s const-decl "postime" times nil) (unit_time const-decl "time" times nil) (zero_time const-decl "time" times nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("pressures" pressures pa_TCC3 0 (pa_TCC3-1 nil 3646735581 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_time const-decl "time" times nil) (unit_time const-decl "time" times nil) (s const-decl "postime" times nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("pressures" pressures pa_TCC2 0 (pa_TCC2-1 nil 3646735581 ("" (subtype-tcc) nil nil) ((zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (system_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (dimension_match? const-decl "bool" measurements nil) (m const-decl "poslength" lengths nil) (unit_length const-decl "length" lengths nil) (zero_length const-decl "length" lengths nil) (kg const-decl "posmass" masses nil) (g const-decl "posmass" masses nil) (unit_mass const-decl "mass" masses nil) (zero_mass const-decl "mass" masses nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("pressures" pressures pa_TCC1 0 (pa_TCC1-1 nil 3646735436 ("" (subtype-tcc) nil nil) ((zero_measurement const-decl "measurement" measurements nil) (zero_mass const-decl "mass" masses nil) (unit_mass const-decl "mass" masses nil) (g const-decl "posmass" masses nil) (kg const-decl "posmass" masses nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil)) nil))("force_distances" force_distances nzreal_times_nzforce_distance_is_nzforce_distance_TCC1 0 (nzreal_times_nzforce_distance_is_nzforce_distance_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force_distance? const-decl "bool" force_distances nil) (force_distance nonempty-type-eq-decl nil force_distances nil) (number nonempty-type-decl nil numbers nil) (nzforce_distance nonempty-type-eq-decl nil force_distances nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("force_distances" force_distances force_times_distance_is_force_distance_TCC2 0 (force_times_distance_is_force_distance_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (length? const-decl "bool" lengths nil) (length nonempty-type-eq-decl nil lengths nil) (system_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("force_distances" force_distances force_times_distance_is_force_distance_TCC1 0 (force_times_distance_is_force_distance_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force? const-decl "bool" forces nil) (force nonempty-type-eq-decl nil forces nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("force_distances" force_distances force_distance_plus_force_distance_is_force_distance_TCC2 0 (force_distance_plus_force_distance_is_force_distance_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force_distance? const-decl "bool" force_distances nil) (force_distance nonempty-type-eq-decl nil force_distances nil) (unit_match? const-decl "bool" measurements nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("force_distances" force_distances force_distance_plus_force_distance_is_force_distance_TCC1 0 (force_distance_plus_force_distance_is_force_distance_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (force_distance? const-decl "bool" force_distances nil) (force_distance nonempty-type-eq-decl nil force_distances nil) (minus_even_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_length const-decl "length" lengths nil) (zero_acceleration const-decl "acceleration" accelerations nil) (zero_force const-decl "force" forces nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("rotational_inertias" rotational_inertias nzreal_times_nzrotational_inertia_is_nzrotational_inertia_TCC1 0 (nzreal_times_nzrotational_inertia_is_nzrotational_inertia_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (rotational_inertia? const-decl "bool" rotational_inertias nil) (rotational_inertia nonempty-type-eq-decl nil rotational_inertias nil) (number nonempty-type-decl nil numbers nil) (nzrotational_inertia nonempty-type-eq-decl nil rotational_inertias nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_mass const-decl "mass" masses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("rotational_inertias" rotational_inertias mass_times_area_is_rotational_inertia_TCC2 0 (mass_times_area_is_rotational_inertia_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (area? const-decl "bool" areas nil) (area nonempty-type-eq-decl nil areas nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("rotational_inertias" rotational_inertias mass_times_area_is_rotational_inertia_TCC1 0 (mass_times_area_is_rotational_inertia_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (mass? const-decl "bool" masses nil) (mass nonempty-type-eq-decl nil masses nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("rotational_inertias" rotational_inertias rotational_inertia_div_rotational_inertia_is_dimensionless_TCC1 0 (rotational_inertia_div_rotational_inertia_is_dimensionless_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (rotational_inertia? const-decl "bool" rotational_inertias nil) (rotational_inertia nonempty-type-eq-decl nil rotational_inertias nil) (number nonempty-type-decl nil numbers nil) (nzrotational_inertia nonempty-type-eq-decl nil rotational_inertias nil) (system_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_mass const-decl "mass" masses nil) (explicit_system? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("rotational_inertias" rotational_inertias rotational_inertia_plus_rotational_inertia_is_rotational_inertia_TCC2 0 (rotational_inertia_plus_rotational_inertia_is_rotational_inertia_TCC2-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (rotational_inertia? const-decl "bool" rotational_inertias nil) (rotational_inertia nonempty-type-eq-decl nil rotational_inertias nil) (unit_match? const-decl "bool" measurements nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_mass const-decl "mass" masses nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("rotational_inertias" rotational_inertias rotational_inertia_plus_rotational_inertia_is_rotational_inertia_TCC1 0 (rotational_inertia_plus_rotational_inertia_is_rotational_inertia_TCC1-1 nil 3646733191 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (rotational_inertia? const-decl "bool" rotational_inertias nil) (rotational_inertia nonempty-type-eq-decl nil rotational_inertias nil) (zero_measurement_is_dimensionless name-judgement "dimensionless" dimensionlesses nil) (zero_mass const-decl "mass" masses nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (valid_measurement? const-decl "bool" measurements nil)) nil))("transmutations" transmutations div_is_inv_mult 0 (div_is_inv_mult-1 nil 3653048342 ("" (grind) nil nil) ((transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (transmute const-decl "valid_measurement" transmutations nil) (* const-decl "valid_measurement" transmutations nil) (/ const-decl "valid_measurement" transmutations nil) (dimension_match? const-decl "bool" measurements nil) (/= const-decl "boolean" notequal nil) (zero_measurement const-decl "measurement" measurements nil) (valid_measurement? const-decl "bool" measurements nil) (explicit_system? const-decl "bool" measurements nil) (system_match? const-decl "bool" measurements nil) (unit_match? const-decl "bool" measurements nil) (comparable? const-decl "bool" measurements nil) (base_value const-decl "real" measurements nil) (= const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil)) shostak))("transmutations" transmutations div_is_inv_mult_TCC2 0 (div_is_inv_mult_TCC2-1 nil 3653048078 ("" (subtype-tcc) nil nil) ((transmute const-decl "valid_measurement" transmutations nil) (* const-decl "valid_measurement" transmutations nil)) nil))("transmutations" transmutations div_is_inv_mult_TCC1 0 (div_is_inv_mult_TCC1-1 nil 3653048078 ("" (skeep) (("" (typepred "t`to_factor") (("" (expand* "*" "transmute" "explicit_system?") (("" (grind) nil nil)) nil)) nil)) nil) ((transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (explicit_system? const-decl "bool" measurements nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (* const-decl "valid_measurement" transmutations nil) (transmute const-decl "valid_measurement" transmutations nil)) nil))("transmutations" transmutations divide_TCC5 0 (divide_TCC5-1 nil 3647794567 ("" (skeep) (("" (typepred "meas" "t`to_factor" "t`from_factor") (("" (expand* "/" "transmute") (("" (grind) nil nil)) nil)) nil)) nil) ((transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (explicit_system? const-decl "bool" measurements nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (zero_measurement const-decl "measurement" measurements nil) (dimension_match? const-decl "bool" measurements nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (/ const-decl "valid_measurement" transmutations nil) (transmute const-decl "valid_measurement" transmutations nil)) nil))("transmutations" transmutations divide_TCC4 0 (divide_TCC4-1 nil 3647779232 ("" (skeep) (("" (typepred "meas" "t`from_factor" "t`to_factor") (("" (expand* "/" "transmute") (("" (field) nil nil)) nil)) nil)) nil) ((transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (explicit_system? const-decl "bool" measurements nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("transmutations" transmutations divide_TCC3 0 (divide_TCC3-1 nil 3647779186 ("" (skeep) (("" (typepred "meas" "t`to_factor") (("" (expand "explicit_system?") (("" (replace -3) (("" (flatten) nil nil)) nil)) nil)) nil)) nil) ((transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (explicit_system? const-decl "bool" measurements nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("transmutations" transmutations divide_TCC2 0 (divide_TCC2-1 nil 3647779186 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (NOT_APPLICABLE? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (NOT_APPLICABLE adt-constructor-decl "(NOT_APPLICABLE?)" measurements nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (explicit_system? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (transmutation nonempty-type-eq-decl nil transmutations nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil)) nil))("transmutations" transmutations divide_TCC1 0 (divide_TCC1-1 nil 3647778945 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (NOT_APPLICABLE? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (NOT_APPLICABLE adt-constructor-decl "(NOT_APPLICABLE?)" measurements nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (explicit_system? const-decl "bool" measurements nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (transmutation nonempty-type-eq-decl nil transmutations nil) (dimension_match? const-decl "bool" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (/= const-decl "boolean" notequal nil)) nil))("transmutations" transmutations not_associative_mult 0 (not_associative_mult-1 nil 3647794245 ("" (inst 1 "(# to_factor := unit_measurement WITH [`system := METRIC], from_factor := unit_measurement WITH [`system := IMPERIAL] #)" "unit_measurement WITH [`system := IMPERIAL]" "unit_measurement WITH [`system := IMPERIAL]") (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil) ((dimension_match? const-decl "bool" measurements nil) (* const-decl "{m: valid_measurement | system_match?(x, m)}" measurements nil) (zero_measurement const-decl "measurement" measurements nil) (* const-decl "valid_measurement" transmutations nil) (transmute const-decl "valid_measurement" transmutations nil) (transmutation nonempty-type-eq-decl nil transmutations nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (system_match? const-decl "bool" measurements nil) (IMPERIAL? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (IMPERIAL adt-constructor-decl "(IMPERIAL?)" measurements nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (system_enum type-decl nil measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (unit_measurement const-decl "valid_measurement" measurements nil) (METRIC? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (METRIC adt-constructor-decl "(METRIC?)" measurements nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (explicit_system? const-decl "bool" measurements nil)) shostak))("transmutations" transmutations times_TCC2 0 (times_TCC2-1 nil 3647778945 ("" (subtype-tcc) nil nil) nil nil))("transmutations" transmutations times_TCC1 0 (times_TCC1-1 nil 3647778945 ("" (skeep) (("" (typepred "meas" "t`from_factor") (("" (expand "explicit_system?") (("" (replace -2) (("" (flatten) nil nil)) nil)) nil)) nil)) nil) ((transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (explicit_system? const-decl "bool" measurements nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("transmutations" transmutations transmute_TCC2 0 (transmute_TCC2-1 nil 3647778115 ("" (skeep) (("" (typepred "meas" "t`to_factor" "t`from_factor") (("" (expand* "valid_measurement?" "explicit_system?" "dimension_match?") (("" (smash) nil nil)) nil)) nil)) nil) ((= const-decl "[T, T -> boolean]" equalities nil) (transmutation nonempty-type-eq-decl nil transmutations nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (explicit_system? const-decl "bool" measurements nil) (nzmeasurement nonempty-type-eq-decl nil measurements nil) (number nonempty-type-decl nil numbers nil) (NOT_APPLICABLE adt-constructor-decl "(NOT_APPLICABLE?)" measurements nil) (NOT_APPLICABLE? adt-recognizer-decl "[system_enum -> boolean]" measurements nil) (/= const-decl "boolean" notequal nil) (valid_measurement nonempty-type-eq-decl nil measurements nil) (valid_measurement? const-decl "bool" measurements nil) (measurement nonempty-type-eq-decl nil measurements nil) (system_enum type-decl nil measurements nil) (posreal nonempty-type-eq-decl nil real_types nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_plus_real_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (dimension_match? const-decl "bool" measurements nil)) nil))("sigma_meas" sigma_meas high_low_rewrite_TCC2 0 (high_low_rewrite_TCC2-1 nil 3667907504 ("" (subtype-tcc) nil nil) nil nil))("measurements" measurements consistent_measurement?_TCC1 0 (consistent_measurement?_TCC1-1 nil 3671195673 ("" (subtype-tcc) nil nil) ((integer? const-decl "bool" integers nil) (/= const-decl "boolean" notequal nil)) nil))