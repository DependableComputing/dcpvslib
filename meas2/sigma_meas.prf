(sigma_meas
 (T_pred_lem 0
  (T_pred_lem-1 nil 3667738923
   ("" (skosimp* t)
    (("" (prop)
      (("1"
        (lemma "connected_domain" ("x" "low!1" "y" "high!1" "z" "z!1"))
        (("1" (assert) nil nil) ("2" (propax) nil nil)
         ("3" (propax) nil nil))
        nil)
       ("2" (skosimp*)
        (("2"
          (lemma "connected_domain" ("x" "low!1" "y" "j!1" "z" "z!1"))
          (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
        nil)
       ("3" (skosimp*)
        (("3"
          (lemma "connected_domain" ("x" "j!1" "y" "high!1" "z" "z!1"))
          (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
        nil)
       ("4" (skosimp*)
        (("4"
          (lemma "connected_domain" ("x" "low!1" "y" "j!1" "z" "z!1"))
          (("1" (assert) nil nil)
           ("2"
            (lemma "connected_domain"
             ("x" "j!2" "y" "j!1" "z" "low!1"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((integer nonempty-type-from-decl nil integers nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (>= const-decl "bool" reals nil))
   shostak))
 (high_low_rewrite_TCC1 0
  (high_low_rewrite_TCC1-1 nil 3667738590
   ("" (skeep 1 t)
    (("" (skeep 2 t)
      (("" (use "connected_domain") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (connected_domain formula-decl nil sigma_meas nil))
   nil))
 (high_low_rewrite 0
  (high_low_rewrite-1 nil 3667740911
   ("" (skosimp*)
    (("" (inst?)
      (("" (prop) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3665846816
   ("" (skeep)
    (("" (typepred "low" "high")
      (("" (grind)
        (("1"
          (lemma "connected_domain" ("x" "low" "y" "j!1" "z" "high"))
          (("1" (grind) nil nil)) nil)
         ("2"
          (lemma "connected_domain" ("x" "j!1" "y" "j!2" "z" "low"))
          (("2"
            (lemma "connected_domain" ("x" "low" "y" "j!2" "z" "high"))
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3665846816 ("" (skeep) (("" (grind) nil nil)) nil)
   ((unit_match? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" sigma_meas nil))
   nil))
 (sigma_TCC3 0
  (sigma_TCC3-1 nil 3665846816
   ("" (skeep)
    (("" (typepred "low" "high")
      (("" (split)
        (("1"
          (lemma "connected_domain"
           ("x" "low" "z" "high - 1" "y" "high"))
          (("1" (grind) nil nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sigma_TCC4 0
  (sigma_TCC4-1 nil 3665846816 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sigma_TCC5 0
  (sigma_TCC5-1 nil 3665858675
   ("" (skeep)
    (("" (typepred "low" "high" "v" "F")
      (("" (expand "summable_fn?")
        (("" (inst -4 "high" "high - 1")
          (("1" (typepred "v(low, high - 1, F)")
            (("1"
              (lemma "unit_match_transitive"
               ("x" "F(high)" "y" "F(high - 1)" "z"
                "v(low, high - 1, F)"))
              (("1" (grind) nil nil)) nil)
             ("2" (hide -4 3) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (hide 3)
            (("2"
              (lemma "connected_domain"
               ("x" "low" "z" "high - 1" "y" "high"))
              (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((summable_fn? const-decl "bool" sigma_meas nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (system_enum type-decl nil measurement_systems nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (low skolem-const-decl "T" sigma_meas nil)
    (high skolem-const-decl "{t: T | t >= low}" sigma_meas nil)
    (unit_match_transitive formula-decl nil measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (unit_match? const-decl "bool" measurements nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sigma_TCC6 0
  (sigma_TCC6-1 nil 3666100461 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" sigma_meas nil)
    (system_enum type-decl nil measurement_systems nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (dimension_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil))
 (sigma_eq_arg_TCC1 0
  (sigma_eq_arg_TCC1-1 nil 3667916235 ("" (subtype-tcc) nil nil) nil
   nil))
 (sigma_eq_arg 0
  (sigma_eq_arg-1 nil 3667916266
   ("" (skeep 1 t) (("" (expand "sigma") (("" (grind) nil nil)) nil))
    nil)
   ((sigma def-decl "{m: measurement | unit_match?(m, F(high))}"
           sigma_meas nil))
   shostak))
 (sigma_scal_TCC1 0
  (sigma_scal_TCC1-1 nil 3667735697 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil)
    (dimension_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (summable_fn? const-decl "bool" sigma_meas nil))
   nil))
 (sigma_scal 0
  (sigma_scal-1 nil 3667740964
   ("" (skolem 1 ("F" _ _ "a"))
    (("" (rewrite "high_low_rewrite")
      (("1" (hide 2)
        (("1" (skeep 1 t)
          (("1" (induct "n" 1)
            (("1" (grind) nil nil)
             ("2" (skeep 1 t)
              (("2" (expand "sigma" +)
                (("2"
                  (lemma "mr_distributive"
                   ("x" "a" "y" "F(1 + k)" "z" "sigma(low_1, k, F)"))
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2"
                        (name-replace "m1"
                         "sigma(low_1, k, LAMBDA (i: T): a * F(i))")
                        (("1"
                          (name-replace "m2" "a * sigma(low_1, k, F)")
                          (("1" (name-replace "m3" "a * F(1 + k)")
                            (("1" (typepred "m1" "m2" "m3")
                              (("1"
                                (case "unit_match?(m3, m1)")
                                (("1"
                                  (case "unit_match?(m3, m2)")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "sigma(low_1, k, F)")
                                      (("2"
                                        (typepred "F")
                                        (("2"
                                          (expand "summable_fn?")
                                          (("2"
                                            (inst -1 "k" "1 + k")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (typepred "F")
                                    (("2"
                                      (expand "summable_fn?")
                                      (("2"
                                        (inst -1 "k" "1 + k")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "F") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred "F") (("3" (grind) nil nil)) nil)
             ("4" (hide 2)
              (("4" (skeep 1 t)
                (("4"
                  (lemma "connected_domain"
                   ("x" "low_1" "y" "high_1" "z" "n"))
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "summable_fn?")
          (("2" (typepred "F") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((high_low_rewrite formula-decl nil sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (unit_match? const-decl "bool" measurements nil)
    (sigma def-decl "{m: measurement | unit_match?(m, F(high))}"
           sigma_meas nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mr_distributive formula-decl nil measurements nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (a skolem-const-decl "real" sigma_meas nil)
    (F skolem-const-decl "(summable_fn?)" sigma_meas nil)
    (subrange type-eq-decl nil integers nil)
    (high_1 skolem-const-decl "{t: T | t >= low_1}" sigma_meas nil)
    (low_1 skolem-const-decl "T" sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (sigma_scal_meas_TCC1 0
  (sigma_scal_meas_TCC1-1 nil 3668156077
   ("" (skeep 1 t)
    (("" (expand "summable_fn?")
      (("" (skeep 1 t)
        (("" (inst -3 "i_1" "j") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((summable_fn? const-decl "bool" sigma_meas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (* const-decl "measurement" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (dimension_match? const-decl "bool" measurements nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (sigma_scal_meas 0
  (sigma_scal_meas-1 nil 3668156106
   ("" (skolem 1 ("F" _ _ "a"))
    (("" (rewrite "high_low_rewrite")
      (("1" (hide 2)
        (("1" (skeep 1 t)
          (("1" (induct "n" 1)
            (("1" (grind) nil nil)
             ("2" (skeep 1 t)
              (("2" (expand "sigma" +)
                (("2"
                  (lemma "distributive"
                   ("x" "a" "y" "F(1 + k)" "z" "sigma(low_1, k, F)"))
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2"
                        (name-replace "m1"
                         "sigma(low_1, k, LAMBDA (i: T): a * F(i))")
                        (("1"
                          (name-replace "m2" "a * sigma(low_1, k, F)")
                          (("1" (name-replace "m3" "a * F(1 + k)")
                            (("1" (typepred "m1" "m2" "m3")
                              (("1"
                                (case "unit_match?(m3, m1)")
                                (("1"
                                  (case "unit_match?(m3, m2)")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred
                                       "sigma(low_1, k, F)"
                                       "F")
                                      (("2"
                                        (expand "summable_fn?")
                                        (("2"
                                          (inst -2 "k" "1 + k")
                                          (("1"
                                            (expand "m3")
                                            (("1"
                                              (expand "m2")
                                              (("1"
                                                (case
                                                 "unit_match?(a * sigma(low_1, k, F), a * F(k))")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "connected_domain"
                                               ("x"
                                                "low_1"
                                                "y"
                                                "high_1"
                                                "z"
                                                "1 + k"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (typepred "F")
                                    (("2"
                                      (expand "summable_fn?")
                                      (("2"
                                        (inst -1 "k" "1 + k")
                                        (("1"
                                          (expand "m3")
                                          (("1"
                                            (case
                                             "unit_match?(a * F(1 + k), a * F(k))")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "connected_domain"
                                             ("x"
                                              "low_1"
                                              "y"
                                              "high_1"
                                              "z"
                                              "1 + k"))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "F")
                            (("2" (expand "summable_fn?")
                              (("2"
                                (skeep 1 t)
                                (("2"
                                  (inst -3 "i_1" "j")
                                  (("2"
                                    (hide -7)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep 1 t)
                (("3" (typepred "F")
                  (("3" (expand "summable_fn?")
                    (("3" (skeep 1 t)
                      (("3" (inst -3 "i_1" "j") (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep 1 t)
                (("4"
                  (lemma "connected_domain"
                   ("x" "low_1" "y" "high_1" "z" "n"))
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "F")
          (("2" (skeep 1 t)
            (("2" (expand "summable_fn?")
              (("2" (skeep 1 t)
                (("2" (inst -6 "i_1" "j") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((high_low_rewrite formula-decl nil sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (unit_match? const-decl "bool" measurements nil)
    (sigma def-decl "{m: measurement | unit_match?(m, F(high))}"
           sigma_meas nil)
    (* const-decl "measurement" measurements nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (distributive formula-decl nil measurements nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (dimension_match? const-decl "bool" measurements nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (k skolem-const-decl "subrange(low_1, high_1)" sigma_meas nil)
    (m2 skolem-const-decl "measurement[S]" sigma_meas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (m3 skolem-const-decl "measurement[S]" sigma_meas nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (a skolem-const-decl "measurement[S]" sigma_meas nil)
    (F skolem-const-decl "(summable_fn?)" sigma_meas nil)
    (subrange type-eq-decl nil integers nil)
    (high_1 skolem-const-decl "{t: T | t >= low_1}" sigma_meas nil)
    (low_1 skolem-const-decl "T" sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (sigma_sum_TCC1 0
  (sigma_sum_TCC1-1 nil 3668275083
   ("" (skeep 1 t)
    (("" (typepred "sigma(low, high, F)" "sigma(low, high, G)")
      (("" (inst -8 "high") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((sigma def-decl "{m: measurement | unit_match?(m, F(high))}"
           sigma_meas nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (>= const-decl "bool" reals nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (unit_match? const-decl "bool" measurements nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (system_enum type-decl nil measurement_systems nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dimension_match? const-decl "bool" measurements nil))
   nil))
 (sigma_sum_TCC2 0
  (sigma_sum_TCC2-1 nil 3668275083 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (system_enum type-decl nil measurement_systems nil)
    (dimension_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil))
   nil))
 (sigma_sum_TCC3 0
  (sigma_sum_TCC3-1 nil 3668275083 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (system_enum type-decl nil measurement_systems nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (dimension_match? const-decl "bool" measurements nil)
    (unit_match? const-decl "bool" measurements nil)
    (summable_fn? const-decl "bool" sigma_meas nil))
   nil))
 (sigma_sum 0
  (sigma_sum-1 nil 3668328161
   ("" (skolem 1 ("F" _ _ "G"))
    (("" (rewrite "high_low_rewrite")
      (("1" (hide 2)
        (("1" (skeep 1 t)
          (("1" (induct "n")
            (("1" (expand "sigma")
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
             ("2" (skeep 1 t)
              (("2" (expand "sigma" 1)
                (("2" (name-replace "s1" "sigma(low_1, k, F)")
                  (("2" (name-replace "s2" "sigma(low_1, k, G)")
                    (("2"
                      (name-replace "s3"
                       "sigma(low_1, k, LAMBDA (i: T): F(i) + G(i))")
                      (("1" (case "unit_match?(s1, s2)")
                        (("1" (case "unit_match?(s1, s3)")
                          (("1" (grind)
                            (("1"
                              (case "F(1 + k)`scaling = s2`scaling")
                              (("1"
                                (replace -1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "s1" "s2" "F" "G")
                                  (("2"
                                    (expand "summable_fn?")
                                    (("2"
                                      (inst -3 "1 + k" "k")
                                      (("2"
                                        (inst -5 "k")
                                        (("2"
                                          (hide -4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "s1" "s3" "G")
                              (("2"
                                (inst -4 "k")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "s2" "s1" "G")
                            (("2" (inst -4 "k") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "summable_fn?")
                          (("2" (skeep 1 t)
                            (("2" (typepred "F" "G")
                              (("2"
                                (inst-cp -3 "i_1")
                                (("2"
                                  (inst -3 "j")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (skeep 1 t)
                          (("3" (typepred "G")
                            (("3" (inst -2 "i") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep 1 t)
                (("3" (expand "summable_fn?")
                  (("3" (skeep 1 t)
                    (("3" (typepred "F" "G")
                      (("3" (inst-cp -3 "i_1")
                        (("3" (inst -3 "j") (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep 1 t)
                (("4" (typepred "G") (("4" (inst -2 "i") nil nil))
                  nil))
                nil))
              nil)
             ("5" (hide 2)
              (("5" (skeep 1 t)
                (("5"
                  (typepred "sigma(low_1, n, F)" "sigma(low_1, n, G)"
                   "G")
                  (("5" (inst -4 "n") (("5" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (hide 2)
              (("6" (skeep 1 t)
                (("6"
                  (lemma "connected_domain"
                   ("x" "low_1" "y" "high_1" "z" "n"))
                  (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep 1 t)
          (("2" (expand "summable_fn?")
            (("2" (skeep 1 t)
              (("2" (typepred "F" "G")
                (("2" (inst-cp -3 "i_1")
                  (("2" (inst -3 "j") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep 1 t)
          (("3" (typepred "G") (("3" (inst -2 "i") nil nil)) nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skeep 1 t)
          (("4"
            (typepred "sigma(low, high, F)" "sigma(low, high, G)" "G")
            (("4" (inst -4 "high") (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((high_low_rewrite formula-decl nil sigma_meas nil)
    (T formal-nonempty-subtype-decl nil sigma_meas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" sigma_meas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (system_enum type-decl nil measurement_systems nil)
    (S formal-const-decl "system_enum" sigma_meas nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unit_match? const-decl "bool" measurements nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (summable_fn? const-decl "bool" sigma_meas nil)
    (sigma def-decl "{m: measurement | unit_match?(m, F(high))}"
           sigma_meas nil)
    (connected_domain formula-decl nil sigma_meas nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (dimension_match? const-decl "bool" measurements nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (F skolem-const-decl "(summable_fn?)" sigma_meas nil)
    (G skolem-const-decl
     "{f: (summable_fn?) | FORALL (i: T): unit_match?(F(i), f(i))}"
     sigma_meas nil)
    (subrange type-eq-decl nil integers nil)
    (high_1 skolem-const-decl "{t: T | t >= low_1}" sigma_meas nil)
    (low_1 skolem-const-decl "T" sigma_meas nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak)))

