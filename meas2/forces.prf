(forces
 (force_TCC1 0
  (force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil))
   nil))
 (unit_force_TCC1 0
  (unit_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil))
   nil))
 (negunit_force_TCC1 0
  (negunit_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil))
   nil))
 (nonzero_force_TCC1 0
  (nonzero_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil))
   nil))
 (nonneg_force_TCC1 0
  (nonneg_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nonpos_force_TCC1 0
  (nonpos_force_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (posforce_TCC1 0
  (posforce_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (negforce_TCC1 0
  (negforce_TCC1-1 nil 3642689215 ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (zero_force const-decl "force" forces nil)
    (unit_force const-decl "force" forces nil)
    (negunit_force const-decl "force" forces nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (force_plus_force_is_force 0
  (force_plus_force_is_force-1 nil 3642689215 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (+ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil))
   nil))
 (force_minus_force_is_force 0
  (force_minus_force_is_force-1 nil 3642689215 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (unit_match? const-decl "bool" measurements nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil))
   nil))
 (real_times_force_is_force 0
  (real_times_force_is_force-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil))
   nil))
 (force_div_nzreal_is_force 0
  (force_div_nzreal_is_force-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil))
   nil))
 (neg_force_is_force 0
  (neg_force_is_force-1 nil 3642689215 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (force nonempty-type-eq-decl nil forces nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (- const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil))
   nil))
 (acceleration_times_mass_is_force 0
  (acceleration_times_mass_is_force-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (measurement nonempty-type-eq-decl nil measurements nil)
    (acceleration? const-decl "bool" accelerations nil)
    (acceleration nonempty-type-eq-decl nil accelerations nil)
    (mass? const-decl "bool" masses nil)
    (mass nonempty-type-eq-decl nil masses nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (zero_measurement_is_dimensionless name-judgement "dimensionless"
     forces nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "measurement" measurements nil)
    (zero_measurement const-decl "measurement" measurements nil)
    (zero_length const-decl "length" lengths nil)
    (zero_acceleration const-decl "acceleration" accelerations nil)
    (dimension_match? const-decl "bool" measurements nil)
    (force? const-decl "bool" forces nil))
   nil))
 (nzreal_times_nzforce_is_nzforce 0
  (nzreal_times_nzforce_is_nzforce-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (* const-decl "{m: measurement | unit_match?(y, m)}" measurements
       nil))
   nil))
 (nzforce_div_nzreal_is_nzforce 0
  (nzforce_div_nzreal_is_nzforce-1 nil 3642689215
   ("" (judgement-tcc) nil nil)
   ((S formal-const-decl "system_enum" forces nil)
    (system_enum type-decl nil measurement_systems nil)
    (/ const-decl "{m: measurement | unit_match?(x, m)}" measurements
       nil))
   nil)))

