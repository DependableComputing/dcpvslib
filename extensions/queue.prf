(queue
 (enqueue_TCC1 0
  (enqueue_TCC1-1 nil 3645478451
   ("" (skeep)
    (("" (lemma "append_is_null" ("l1" "q" "l2" "(: item :)"))
      (("" (case "member(item, (: item :))")
        (("1" (lemma "member_null" ("x" "item" "l" "(: item :)"))
          (("1" (assert) nil nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil queue nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (append_is_null formula-decl nil list_props_aux "while/")
    (member_null formula-decl nil list_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member def-decl "bool" list_props nil))
   nil))
 (head_TCC1 0
  (head_TCC1-1 nil 3645412724 ("" (grind) nil nil)
   ((T formal-type-decl nil queue nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (dequeue_TCC1 0
  (dequeue_TCC1-1 nil 3645412724 ("" (grind) nil nil) nil nil))
 (enqueue2_has_first_item_head 0
  (enqueue2_has_first_item_head-1 nil 3645413191 ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)
    (enqueue const-decl "{l: list[T] | NOT null?(l)}" queue nil)
    (nth def-decl "T" list_props nil) (head const-decl "T" queue nil))
   shostak))
 (enqueue2_dequeue1_has_second_item_list 0
  (enqueue2_dequeue1_has_second_item_list-1 nil 3645413195
   ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)
    (enqueue const-decl "{l: list[T] | NOT null?(l)}" queue nil)
    (dequeue const-decl "list[T]" queue nil))
   shostak))
 (poslength_implies_notnull 0
  (poslength_implies_notnull-1 nil 3645484977 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   shostak)))

